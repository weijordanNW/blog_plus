import{_ as s,o as a,c as n,f as i}from"./app-Coyv5_L_.js";const l={},e=i(`<h1 id="vue" tabindex="-1"><a class="header-anchor" href="#vue"><span>Vue</span></a></h1><h1 id="关于-vue" tabindex="-1"><a class="header-anchor" href="#关于-vue"><span>关于 Vue</span></a></h1><h2 id="虚拟dom" tabindex="-1"><a class="header-anchor" href="#虚拟dom"><span>虚拟dom</span></a></h2><p><strong>虚拟DOM就是</strong> <strong>用Js来模拟出DOM结构</strong> <strong>，通过****diff算法</strong>来计算出最小的变更，<strong>通过对应的渲染器，来渲染到页面上。</strong></p><p><strong>同时虚拟DOM也为跨平台开发提供了极大的便利，开发者写的同一套代码（有些需要针对不同平台做区分），通过不同的渲染规则，就可以生成不同平台的代码。</strong></p><p><strong>在vue中会通过****渲染器</strong>来将虚拟DOM转换为对应平台的真实DOM。如renderer(vnode， container)，该方法会根据vnode描述的信息（如tag、props、children）来创建DOM元素，根据规则为对应的元素添加属性和事件，处理vnode下的children。</p><h2 id="双端diff算法和快速diff算法" tabindex="-1"><a class="header-anchor" href="#双端diff算法和快速diff算法"><span>双端diff算法和快速diff算法</span></a></h2><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/45821596/1725936704013-fb231d42-fdbd-41c8-a2de-9ec0d5312987.jpeg" alt="" loading="lazy"><strong>在Vue.js框架中，虚拟DOM的diff算法是用于比较新旧虚拟DOM树差异的核心机制，目的是为了高效地更新真实DOM。Vue 2和Vue 3在diff算法上有所不同，Vue 2使用的是双端diff算法，而Vue 3则引入了快速diff算法。</strong></p><h3 id="vue-2的双端diff算法" tabindex="-1"><a class="header-anchor" href="#vue-2的双端diff算法"><span>Vue 2的双端diff算法</span></a></h3><p><strong>双端diff算法（Two-way diff）是一种在两端同时进行对比的算法。它从新旧两个虚拟DOM列表的头部和尾部开始，向中间进行扫描，寻找相同key的节点，并对这些节点进行更新或移动。这种方法可以减少不必要的DOM操作，但仍然存在一些性能瓶颈，尤其是在处理大量节点或复杂列表时。</strong></p><h3 id="vue-3的快速diff算法" tabindex="-1"><a class="header-anchor" href="#vue-3的快速diff算法"><span>Vue 3的快速diff算法</span></a></h3><p><strong>Vue 3引入了快速diff算法，这是一种更高效的算法，它借鉴了纯文本diff算法的思想。快速diff算法在处理新旧节点列表时，会先进行预处理，找出可以确定无需比较的相同前后缀节点，然后只对中间不确定的部分进行深入比较。这种方法可以进一步减少不必要的DOM操作，提高性能。</strong></p><p><strong>快速diff算法的核心在于使用了一个名为source数组来记录新节点的位置索引，并通过构建最长递增子序列（Longest Increasing Subsequence, LIS）来确定哪些节点需要移动。这种方法相比双端diff算法，处理的边际条件更少，性能更优。</strong></p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p><strong>Vue 3的快速diff算法相比Vue 2的双端diff算法，在处理复杂列表更新时，能够提供更好的性能。它通过预处理和最长递增子序列的构建，减少了不必要的DOM操作，使得渲染更新更加高效。这种算法的改进是Vue 3性能提升的一个重要方面。</strong></p><h2 id="vue2和vue3有哪些不同" tabindex="-1"><a class="header-anchor" href="#vue2和vue3有哪些不同"><span>vue2和vue3有哪些不同</span></a></h2><figure><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/45821596/1725937348160-92450d55-52a6-4c92-a1f8-48ab06e33e45.jpeg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><details class="lake-collapse"><summary id="u4b87aff0"></summary><p><strong>Vue 2 和 Vue 3 都是流行的前端框架 Vue.js 的主要版本，它们在功能、性能和语法上有一些显著的差异。以下是 Vue 2 和 Vue 3 之间的一些主要区别：</strong></p><ol><li><strong>响应式系统的重写</strong> <strong>：</strong></li></ol><ul><li>**Vue 2 使用的是 **<code>&lt;span class=&quot;ne-text&quot;&gt;defineProperty&lt;/span&gt;</code>（Object.defineProperty）来实现响应式系统。</li><li><strong>Vue 3 引入了基于 Proxy 的响应式系统，这使得 Vue 3 能够更高效地追踪依赖和更新视图。</strong></li></ul><ol start="2"><li><strong>Composition API</strong> <strong>：</strong></li></ol><ul><li><strong>Vue 3 引入了 Composition API，这是一种新的编写组件逻辑的方式，它提供了更好的代码组织和复用性，特别是在处理复杂组件时。</strong></li></ul><ol start="3"><li><strong>Fragment、Teleport 和 Suspense</strong> <strong>：</strong></li></ol><ul><li>**Vue 3 引入了新的内置组件，如 **<code>&lt;span class=&quot;ne-text&quot;&gt;Fragment&lt;/span&gt;</code>（允许多个根节点）、<code>&lt;span class=&quot;ne-text&quot;&gt;Teleport&lt;/span&gt;</code>（可以将组件的子节点传输到 DOM 的其他部分）和 <code>&lt;span class=&quot;ne-text&quot;&gt;Suspense&lt;/span&gt;</code>（用于异步组件的加载状态处理）。</li></ul><ol start="4"><li><strong>性能提升</strong> <strong>：</strong></li></ol><ul><li><strong>Vue 3 在虚拟 DOM 的重写、组件初始化、编译器优化等方面都进行了性能提升。</strong></li></ul><ol start="5"><li><strong>Tree-shaking 支持</strong> <strong>：</strong></li></ol><ul><li><strong>Vue 3 的模块化系统更好地支持了 Tree-shaking，这意味着在最终的构建中可以移除未使用的代码，从而减少应用的大小。</strong></li></ul><ol start="6"><li><strong>自定义渲染器 API</strong> <strong>：</strong></li></ol><ul><li><strong>Vue 3 提供了更灵活的自定义渲染器 API，允许开发者创建自定义的渲染器。</strong></li></ul><ol start="7"><li><strong>全局 API 的更改</strong> <strong>：</strong></li></ol><ul><li>**Vue 3 对全局 API 进行了更改，例如 **<code>&lt;span class=&quot;ne-text&quot;&gt;Vue.prototype&lt;/span&gt;</code> 被 <code>&lt;span class=&quot;ne-text&quot;&gt;app.config.globalProperties&lt;/span&gt;</code> 替代。</li></ul><ol start="8"><li><strong>模板和组件的改进</strong> <strong>：</strong></li></ol><ul><li>**Vue 3 改进了模板编译器，支持更广泛的 JavaScript 特性，并允许在 **<code>&lt;span class=&quot;ne-text&quot;&gt;&lt;script&gt;&lt;/span&gt;</code> 标签中使用新的语法。</li></ul><ol start="9"><li><strong>TypeScript 支持</strong> <strong>：</strong></li></ol><ul><li><strong>Vue 3 的代码库使用 TypeScript 重写，提供了更好的类型推断和类型检查。</strong></li></ul><ol start="10"><li><strong>内部重构</strong> <strong>：</strong></li></ol><ul><li><strong>Vue 3 进行了大规模的内部重构，包括虚拟 DOM 的重写和响应式系统的改进。</strong></li></ul><ol start="11"><li><strong>新的生命周期钩子</strong> <strong>：</strong></li></ol><ul><li>**Vue 3 引入了一些新的生命周期钩子，如 **<code>&lt;span class=&quot;ne-text&quot;&gt;onBeforeMount&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;onMounted&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;onBeforeUpdate&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;onUpdated&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;onBeforeUnmount&lt;/span&gt;</code> 和 <code>&lt;span class=&quot;ne-text&quot;&gt;onUnmounted&lt;/span&gt;</code>。</li></ul><ol start="12"><li><strong>更好的组件通信</strong> <strong>：</strong></li></ol><ul><li>**Vue 3 提供了 **<code>&lt;span class=&quot;ne-text&quot;&gt;provide&lt;/span&gt;</code> 和 <code>&lt;span class=&quot;ne-text&quot;&gt;inject&lt;/span&gt;</code> 的改进版本，使得跨组件的状态共享更加方便。</li></ul><p><strong>这些改进使得 Vue 3 在性能、可维护性和开发体验上都有了显著的提升。开发者在升级到 Vue 3 时，需要对这些变化有所了解，并可能需要对现有的代码进行一些调整。</strong></p></details><h2 id="vue3双向绑定实现" tabindex="-1"><a class="header-anchor" href="#vue3双向绑定实现"><span>vue3双向绑定实现</span></a></h2><p><strong>劫持数据 Proxy</strong></p><p><strong>依赖收集 get</strong></p><p>**派发更新 set **</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// WeakMap常用于存储只有当key所引用的对象存在时（没有被回收）才有价值的消息，十分贴合双向绑定场景</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> bucket</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> WeakMap</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(); </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 存储副作用函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> activeEffect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 用一个全局变量处理被注册的函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> tempObj</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {}; </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 临时对象，用于操作</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> data</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> { </span><span style="color:#E06C75;--shiki-dark:#E06C75;">text</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;hello world&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> }; </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 响应数据源</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 用于清除依赖</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> cleanup</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">effectFn</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> i</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#E06C75;--shiki-dark:#E06C75;">i</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> &lt;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> effectFn</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">deps</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">length</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#E06C75;--shiki-dark:#E06C75;">i</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">++</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> deps</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> effectFn</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">deps</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E06C75;--shiki-dark:#E06C75;">i</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    deps</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">delete</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">effectFn</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  effectFn</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">deps</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">length</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 处理依赖函数</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> effect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">fn</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  const</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> effectFn</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> () </span><span style="color:#C678DD;--shiki-dark:#C678DD;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    cleanup</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">effectFn</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    activeEffect</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> effectFn</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    fn</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  effectFn</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">deps</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  effectFn</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 在get时拦截函数调用track函数追踪变化</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> track</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">!</span><span style="color:#E06C75;--shiki-dark:#E06C75;">activeEffect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">//</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> depsMap</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> bucket</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">!</span><span style="color:#E06C75;--shiki-dark:#E06C75;">depsMap</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    bucket</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">set</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, (</span><span style="color:#E06C75;--shiki-dark:#E06C75;">depsMap</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Map</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()));</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> deps</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> depsMap</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">!</span><span style="color:#E06C75;--shiki-dark:#E06C75;">deps</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    depsMap</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">set</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, (</span><span style="color:#E06C75;--shiki-dark:#E06C75;">deps</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Set</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()));</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  deps</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">add</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">activeEffect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  activeEffect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">deps</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">push</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">deps</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 在set拦截函数内调用trigger来触发变化</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> trigger</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> depsMap</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> bucket</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">!</span><span style="color:#E06C75;--shiki-dark:#E06C75;">depsMap</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> effects</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> depsMap</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> effectsToRun</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Set</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">effects</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  effectsToRun</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">forEach</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">effectFn</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> =&gt;</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> effectFn</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">  // effects &amp;&amp; effects.forEach(fn =&gt; fn());</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> obj</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Proxy</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">data</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">  // 拦截读取操作</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">!</span><span style="color:#E06C75;--shiki-dark:#E06C75;">activeEffect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">//</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;get -&gt; key&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    track</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E06C75;--shiki-dark:#E06C75;">key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">  // 拦截设置操作</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  set</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">newValue</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;set -&gt; key: newValue&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">newValue</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E06C75;--shiki-dark:#E06C75;">key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> newValue</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    trigger</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">effect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(() </span><span style="color:#C678DD;--shiki-dark:#C678DD;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  tempObj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">text</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">text</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;tempObj.text :&gt;&gt; &quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">tempObj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">text</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(() </span><span style="color:#C678DD;--shiki-dark:#C678DD;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">text</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;hi vue3&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">1000</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vue3中的ref、toref、torefs总结" tabindex="-1"><a class="header-anchor" href="#vue3中的ref、toref、torefs总结"><span>vue3中的ref、toRef、toRefs总结</span></a></h2><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h3><ul><li><code>&lt;span class=&quot;ne-text&quot;&gt;ref&lt;/span&gt;</code> 用于创建单一值的响应式引用。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;toRef&lt;/span&gt;</code> 用于创建对象某个属性的响应式引用。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;toRefs&lt;/span&gt;</code> 用于将响应式对象的每个属性转换为响应式引用。</li><li><strong>computed和watch的区别</strong></li><li></li></ul><details class="lake-collapse"><summary id="u51fb47af"><span class="ne-text">拓展</span></summary><p><strong>在 Vue 3 中，响应式系统得到了重写，引入了基于 Proxy 的 API，这使得 Vue 3 的响应式特性更加强大和灵活。</strong><code>&lt;span class=&quot;ne-text&quot;&gt;ref&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;toRef&lt;/span&gt;</code> 和 <code>&lt;span class=&quot;ne-text&quot;&gt;toRefs&lt;/span&gt;</code> 是 Vue 3 中与响应式系统相关的几个重要函数，它们在 Composition API 中扮演着关键角色。</p><h3 id="ref" tabindex="-1"><a class="header-anchor" href="#ref"><span>ref</span></a></h3><p><code>&lt;span class=&quot;ne-text&quot;&gt;ref&lt;/span&gt;</code> 是一个用于创建响应式引用的函数。它接受一个值作为参数，并返回一个包含 <code>&lt;span class=&quot;ne-text&quot;&gt;.value&lt;/span&gt;</code> 属性的响应式对象。这个对象的 <code>&lt;span class=&quot;ne-text&quot;&gt;.value&lt;/span&gt;</code> 属性指向原始值，并且当原始值改变时，任何依赖于该响应式引用的组件都会重新渲染。</p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> { </span><span style="color:#E06C75;--shiki-dark:#E06C75;">ref</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> } </span><span style="color:#C678DD;--shiki-dark:#C678DD;">from</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;vue&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> count</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> ref</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 创建一个响应式引用</span></span></code></pre></div><p>**在模板中使用时，可以直接访问 **<code>&lt;span class=&quot;ne-text&quot;&gt;.value&lt;/span&gt;</code> 属性：</p><div class="language-vue" data-ext="vue" data-title="vue"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">template</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;{{ count.value }}&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">template</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><p>**或者在 Vue 3.2 及更高版本中，可以使用 **<code>&lt;span class=&quot;ne-text&quot;&gt;v-model&lt;/span&gt;</code> 指令的 <code>&lt;span class=&quot;ne-text&quot;&gt;modelValue&lt;/span&gt;</code> 和 <code>&lt;span class=&quot;ne-text&quot;&gt;&quot;update:modelValue&quot;&lt;/span&gt;</code> 事件进行更简洁的绑定：</p><div class="language-vue" data-ext="vue" data-title="vue"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">template</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">input</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> v-model</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&quot;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">count</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">template</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><h3 id="toref" tabindex="-1"><a class="header-anchor" href="#toref"><span>toRef</span></a></h3><p><code>&lt;span class=&quot;ne-text&quot;&gt;toRef&lt;/span&gt;</code> 用于创建一个响应式引用，但它是针对对象的某个属性。当你有一个响应式对象，并想要创建一个仅针对其某个属性的响应式引用时，可以使用 <code>&lt;span class=&quot;ne-text&quot;&gt;toRef&lt;/span&gt;</code>。</p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> { </span><span style="color:#E06C75;--shiki-dark:#E06C75;">toRef</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> } </span><span style="color:#C678DD;--shiki-dark:#C678DD;">from</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;vue&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> state</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> reactive</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">({ </span><span style="color:#E06C75;--shiki-dark:#E06C75;">count</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> countRef</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> toRef</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">state</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;count&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 创建一个仅针对 state.count 的响应式引用</span></span></code></pre></div><p><strong>这样，</strong><code>&lt;span class=&quot;ne-text&quot;&gt;countRef&lt;/span&gt;</code> 将仅追踪 <code>&lt;span class=&quot;ne-text&quot;&gt;state&lt;/span&gt;</code> 对象中 <code>&lt;span class=&quot;ne-text&quot;&gt;count&lt;/span&gt;</code> 属性的变化。</p><h3 id="torefs" tabindex="-1"><a class="header-anchor" href="#torefs"><span>toRefs</span></a></h3><p><code>&lt;span class=&quot;ne-text&quot;&gt;toRefs&lt;/span&gt;</code> 用于将一个响应式对象转换为一个包含多个响应式引用的对象。这在处理由 <code>&lt;span class=&quot;ne-text&quot;&gt;reactive&lt;/span&gt;</code> 创建的响应式对象时非常有用，因为它允许你保留每个属性的响应性。</p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> { </span><span style="color:#E06C75;--shiki-dark:#E06C75;">toRefs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> } </span><span style="color:#C678DD;--shiki-dark:#C678DD;">from</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;vue&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> state</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> reactive</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">({ </span><span style="color:#E06C75;--shiki-dark:#E06C75;">count</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Vue&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> { </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">count</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> } </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> toRefs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">state</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><p><strong>现在，</strong><code>&lt;span class=&quot;ne-text&quot;&gt;count&lt;/span&gt;</code> 和 <code>&lt;span class=&quot;ne-text&quot;&gt;name&lt;/span&gt;</code> 都是响应式引用，它们的更新将触发依赖它们的组件重新渲染。</p><h3 id="总结-2" tabindex="-1"><a class="header-anchor" href="#总结-2"><span>总结</span></a></h3><ul><li><code>&lt;span class=&quot;ne-text&quot;&gt;ref&lt;/span&gt;</code> 用于创建单一值的响应式引用。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;toRef&lt;/span&gt;</code> 用于创建对象某个属性的响应式引用。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;toRefs&lt;/span&gt;</code> 用于将响应式对象的每个属性转换为响应式引用。。这些函数是 Vue 3 Composition API 的基础，它们提供了一种灵活的方式来处理响应式数据。</li></ul></details><h2 id="computed和watch的区别" tabindex="-1"><a class="header-anchor" href="#computed和watch的区别"><span>computed和watch的区别</span></a></h2><p><strong>使用场景：computed适用于一个数据 受多个数据影响 使用；</strong></p><p><strong>watch适合一个数据 影响 多个数据使用。</strong></p><p><strong>区别：computed属性默认会走</strong> <strong>缓存</strong> <strong>，只有依赖数据发生变化，才会重新计算，不支持异步，有异步导致数据发生变化时，无法做出相应改变；</strong></p><p><strong>watch不依赖缓存，一旦数据发生变化就直接触发响应操作，支持异步。</strong></p><h2 id="vue-router的路由守卫" tabindex="-1"><a class="header-anchor" href="#vue-router的路由守卫"><span>vue-router的路由守卫</span></a></h2><ul><li><strong>全局前置守卫</strong></li></ul><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> router</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">beforeEach</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">((</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">to</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">next</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">  // to: 即将进入的目标</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">  // from:当前导航正要离开的路由</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  return</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> false</span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"> // 返回false用于取消导航</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Login&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">} </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 返回到对应name的页面</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  next</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">({</span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Login&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}) </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 进入到对应的页面</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  next</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 放行</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">})</span></span></code></pre></div><ul><li><strong>全局解析守卫</strong> <strong>:类似beforeEach</strong></li></ul><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">router</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">beforeResolve</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">to</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">to</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">meta</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">canCopy</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> false</span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"> // 也可取消导航</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">})</span></span></code></pre></div><ul><li><strong>全局后置钩子</strong></li></ul><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">router</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">afterEach</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">((</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">to</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  logInfo</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">to</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">fullPath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">})</span></span></code></pre></div><ul><li><strong>导航错误钩子，导航发生错误调用</strong></li></ul><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">router</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">onError</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">error</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  logError</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">error</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">})</span></span></code></pre></div><ul><li><strong>路由独享守卫,beforeEnter</strong>可以传入单个函数，也可传入多个函数。</li></ul><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> dealParams</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">to</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> dealPermission</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">to</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> routes</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    path</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;/home&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    component</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E06C75;--shiki-dark:#E06C75;">Home</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    beforeEnter</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: (</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">to</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      return</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> false</span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"> // 取消导航</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // beforeEnter: [dealParams, dealPermission]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>组件内的守卫</strong></p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Home</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  template</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">\`...\`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  beforeRouteEnter</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">to</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 此时组件实例还未被创建，不能获取this</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  beforeRouteUpdate</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">to</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 当前路由改变，但是组件被复用的时候调用，此时组件已挂载好</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  beforeRouteLeave</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">to</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 导航离开渲染组件的对应路由时调用</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><h2 id="composition-api对比-option-api的优势" tabindex="-1"><a class="header-anchor" href="#composition-api对比-option-api的优势"><span>composition Api对比 option Api的优势</span></a></h2><ul><li><strong>更好的****代码组织</strong></li></ul><p><strong>--组合式API</strong></p><ul><li><strong>更好的****逻辑复用</strong></li></ul><p>**--Hooks钩子函数 及 替代mixin的 **自定义的use 前缀的 Hooks</p><ul><li><strong>更好的****类型推导</strong></li></ul><p><strong>--TS</strong></p>`,52),o=[e];function t(r,p){return a(),n("div",null,o)}const c=s(l,[["render",t],["__file","vue.html.vue"]]),k=JSON.parse('{"path":"/posts/Web/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/vue.html","title":"Vue","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2022-10-25T00:00:00.000Z","category":["vue"],"tag":null,"description":"Vue 关于 Vue 虚拟dom 虚拟DOM就是 用Js来模拟出DOM结构 ，通过****diff算法来计算出最小的变更，通过对应的渲染器，来渲染到页面上。 同时虚拟DOM也为跨平台开发提供了极大的便利，开发者写的同一套代码（有些需要针对不同平台做区分），通过不同的渲染规则，就可以生成不同平台的代码。 在vue中会通过****渲染器来将虚拟DOM转换为...","head":[["meta",{"property":"og:url","content":"https://weijordan.com/posts/Web/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/vue.html"}],["meta",{"property":"og:site_name","content":"Mr.子冥"}],["meta",{"property":"og:title","content":"Vue"}],["meta",{"property":"og:description","content":"Vue 关于 Vue 虚拟dom 虚拟DOM就是 用Js来模拟出DOM结构 ，通过****diff算法来计算出最小的变更，通过对应的渲染器，来渲染到页面上。 同时虚拟DOM也为跨平台开发提供了极大的便利，开发者写的同一套代码（有些需要针对不同平台做区分），通过不同的渲染规则，就可以生成不同平台的代码。 在vue中会通过****渲染器来将虚拟DOM转换为..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.nlark.com/yuque/0/2024/jpeg/45821596/1725936704013-fb231d42-fdbd-41c8-a2de-9ec0d5312987.jpeg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-22T01:17:53.000Z"}],["meta",{"property":"article:author","content":"子冥"}],["meta",{"property":"article:published_time","content":"2022-10-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-22T01:17:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue\\",\\"image\\":[\\"https://cdn.nlark.com/yuque/0/2024/jpeg/45821596/1725936704013-fb231d42-fdbd-41c8-a2de-9ec0d5312987.jpeg\\",\\"https://cdn.nlark.com/yuque/0/2024/jpeg/45821596/1725937348160-92450d55-52a6-4c92-a1f8-48ab06e33e45.jpeg\\"],\\"datePublished\\":\\"2022-10-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-22T01:17:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"子冥\\",\\"url\\":\\"https://weijordan.com\\"}]}"]]},"headers":[{"level":2,"title":"虚拟dom","slug":"虚拟dom","link":"#虚拟dom","children":[]},{"level":2,"title":"双端diff算法和快速diff算法","slug":"双端diff算法和快速diff算法","link":"#双端diff算法和快速diff算法","children":[{"level":3,"title":"Vue 2的双端diff算法","slug":"vue-2的双端diff算法","link":"#vue-2的双端diff算法","children":[]},{"level":3,"title":"Vue 3的快速diff算法","slug":"vue-3的快速diff算法","link":"#vue-3的快速diff算法","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"vue2和vue3有哪些不同","slug":"vue2和vue3有哪些不同","link":"#vue2和vue3有哪些不同","children":[]},{"level":2,"title":"vue3双向绑定实现","slug":"vue3双向绑定实现","link":"#vue3双向绑定实现","children":[]},{"level":2,"title":"vue3中的ref、toRef、toRefs总结","slug":"vue3中的ref、toref、torefs总结","link":"#vue3中的ref、toref、torefs总结","children":[{"level":3,"title":"总结","slug":"总结-1","link":"#总结-1","children":[]},{"level":3,"title":"ref","slug":"ref","link":"#ref","children":[]},{"level":3,"title":"toRef","slug":"toref","link":"#toref","children":[]},{"level":3,"title":"toRefs","slug":"torefs","link":"#torefs","children":[]},{"level":3,"title":"总结","slug":"总结-2","link":"#总结-2","children":[]}]},{"level":2,"title":"computed和watch的区别","slug":"computed和watch的区别","link":"#computed和watch的区别","children":[]},{"level":2,"title":"vue-router的路由守卫","slug":"vue-router的路由守卫","link":"#vue-router的路由守卫","children":[]},{"level":2,"title":"composition Api对比 option Api的优势","slug":"composition-api对比-option-api的优势","link":"#composition-api对比-option-api的优势","children":[]}],"git":{"createdTime":1729559873000,"updatedTime":1729559873000,"contributors":[{"name":"weijordan","email":"12012972+weijordan@user.noreply.gitee.com","commits":1}]},"readingTime":{"minutes":9.86,"words":2957},"filePathRelative":"posts/Web/基础知识/vue.md","localizedDate":"2022年10月25日","excerpt":"\\n<h1>关于 Vue</h1>\\n<h2>虚拟dom</h2>\\n<p><strong>虚拟DOM就是</strong> <strong>用Js来模拟出DOM结构</strong> <strong>，通过****diff算法</strong>来计算出最小的变更，<strong>通过对应的渲染器，来渲染到页面上。</strong></p>\\n<p><strong>同时虚拟DOM也为跨平台开发提供了极大的便利，开发者写的同一套代码（有些需要针对不同平台做区分），通过不同的渲染规则，就可以生成不同平台的代码。</strong></p>\\n<p><strong>在vue中会通过****渲染器</strong>来将虚拟DOM转换为对应平台的真实DOM。如renderer(vnode， container)，该方法会根据vnode描述的信息（如tag、props、children）来创建DOM元素，根据规则为对应的元素添加属性和事件，处理vnode下的children。</p>","autoDesc":true}');export{c as comp,k as data};

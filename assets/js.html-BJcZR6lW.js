import{_ as a,c as n,a as l,o as i}from"./app-362LKFfs.js";const t="/assets/1726710634248-ZRIi4XM2.png",o="/assets/1726711102885-C1_hH7Qk.png",e="/assets/1726711353383-CaD5x03e.png",r={};function p(B,s){return i(),n("div",null,s[0]||(s[0]=[l('<h1 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript"><span>JavaScript</span></a></h1><h1 id="js相关" tabindex="-1"><a class="header-anchor" href="#js相关"><span>Js相关</span></a></h1><details class="lake-collapse"><summary id="u8404aeb8"></summary><p><strong>Js相关</strong></p><p><strong>Js的基础类型，typeof和instanceof的区别</strong></p><p><strong>数组的forEach和map方法有哪些区别？常用哪些方法去对数组进行增、删、改</strong></p><p><strong>闭包和作用域</strong></p><p><strong>实现一个类以关键字new功能的函数</strong></p><p><strong>如何实现继承（原型和原型链）</strong></p><p><strong>箭头函数和普通函数有什么区别</strong></p><p><strong>迭代器(iterator)接口和生成器(generator)函数的关系</strong></p><p><strong>浏览器的事件循环机制</strong></p></details><h2 id="js-类型判断ttps-blog-csdn-net-mywpython-article-details-134671186" tabindex="-1"><a class="header-anchor" href="#js-类型判断ttps-blog-csdn-net-mywpython-article-details-134671186"><span>js 类型判断<a href="https://blog.csdn.net/mywpython/article/details/134671186" target="_blank" rel="noopener noreferrer">ttps://blog.csdn.net/mywpython/article/details/134671186</a></span></a></h2><figure><img src="'+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>Object.prototype.toString.call</strong></p><p><strong>Object.prototype.toString.call方法返回各数据类型的[object xxx]形式：</strong></p><p><strong>去掉Object.prototype.toString.call方法返回结果中的&quot;[object&quot;，只保留具体类型：</strong></p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> getType</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">data</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  return</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">prototype</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">toString</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">call</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">data</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">replace</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">/</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">\\[</span><span style="color:#E06C75;--shiki-dark:#E06C75;">object\\s</span><span style="color:#D19A66;--shiki-dark:#D19A66;">+</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">+</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">\\]</span><span style="color:#E06C75;--shiki-dark:#E06C75;">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;$1&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">toLowerCase</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><details class="lake-collapse"><summary id="u1f7880bb"></summary><p><strong>四、Object.prototype.toString.call</strong></p><p><strong>Object.prototype.toString.call方法返回各数据类型的[object xxx]形式：</strong></p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> str</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;testme&#39;</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">prototype</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">toString</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">call</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">str</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// [object String]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> num</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 123</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">prototype</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">toString</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">call</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">num</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// [object Number]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> bol</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> true</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">prototype</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">toString</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">call</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">bol</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// [object Boolean]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> sy</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Symbol</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">prototype</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">toString</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">call</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">sy</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// [object Symbol]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> bi</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> BigInt</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;12345678910111213&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">prototype</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">toString</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">call</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">bi</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// [object BigInt]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">prototype</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">toString</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">call</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">null</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// [object Null]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">prototype</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">toString</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">call</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">undefined</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// [object Undefined]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> arr</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">7</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">prototype</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">toString</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">call</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">arr</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// [object Array]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> obj</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span><span style="color:#E06C75;--shiki-dark:#E06C75;">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">prototype</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">toString</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">call</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// [object Object]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Man</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">age</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">   this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> name</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">   this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">age</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> age</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">prototype</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">toString</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">call</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">Man</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// [object Function]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> man</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Man</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Lily&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">12</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">prototype</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">toString</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">call</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">man</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// [object Object]</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">1.</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> 使用</span><span style="color:#C678DD;--shiki-dark:#C678DD;">typeof</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">判断基本类型：</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> str</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;testme&#39;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">typeof</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> str</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // string</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> num</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 123</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">typeof</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> num</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // number</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> bol</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> true</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">typeof</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> bol</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // boolean</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> nu</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> null</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">type</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> nu</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // object</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">typeof</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> undefVar</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // undefined</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> sy</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Symbol</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">typeof</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> sy</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // symbol</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> bi</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> BigInt</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;12345678910111213&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">typeof</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> bi</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // bigint</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">2.</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> 使用</span><span style="color:#C678DD;--shiki-dark:#C678DD;">typeof</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">判断引用类型：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> arr</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">7</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">typeof</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> arr</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // object</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> obj</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span><span style="color:#E06C75;--shiki-dark:#E06C75;">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">typeof</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> obj</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // object</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Man</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">age</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">   this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> name</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">   this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">age</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> age</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">typeof</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> Man</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // function</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> man</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Man</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Lily&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">12</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">typeof</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> man</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // object</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>二、instanceof</strong></p><p><strong>使用方法: A instanceof B</strong></p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> arr</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">7</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">arr</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> instanceof</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Array</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // true</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> obj</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span><span style="color:#E06C75;--shiki-dark:#E06C75;">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">obj</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> instanceof</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Object</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // true</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">obj</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> instanceof</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Array</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // false</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Man</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">age</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">   this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> name</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">   this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">age</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> age</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">Man</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> instanceof</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Function</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // true</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> man</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Man</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Lily&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">12</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">man</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> instanceof</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Object</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // true</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>三、constructor</strong></p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> str</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;testme&#39;</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">str</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">constructor</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> ===</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> String</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // true</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> num</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 123</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">num</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">constructor</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> ===</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> Number</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // true</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> bol</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> true</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">bol</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">constructor</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> ===</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> Boolean</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // true</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> arr</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">7</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">arr</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">constructor</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> ===</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> Array</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // true</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> obj</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span><span style="color:#E06C75;--shiki-dark:#E06C75;">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">constructor</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> ===</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> Object</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // true</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Man</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">age</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">   this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> name</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">   this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">age</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> age</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Man</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">constructor</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> ===</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> Function</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // true</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> man</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Man</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Lily&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">12</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">man</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">constructor</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> ===</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> Man</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // true</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">但是像 </span><span style="color:#D19A66;--shiki-dark:#D19A66;">null</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">、</span><span style="color:#D19A66;--shiki-dark:#D19A66;">undefined</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">这种就调用不了</span><span style="color:#E06C75;--shiki-dark:#E06C75;">constructor</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">判断数据类型了</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr></details><h2 id="怎么判断两个对象相等" tabindex="-1"><a class="header-anchor" href="#怎么判断两个对象相等"><span>怎么判断两个对象相等？</span></a></h2><p><a href="https://juejin.cn/post/7408226845466902568" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/7408226845466902568</a></p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p><strong>判断两个对象是否相等可以通过以下几种主要方式：</strong></p><ul><li><strong>引用比较</strong> **：使用 **<code>&lt;span class=&quot;ne-text&quot;&gt;===&lt;/span&gt;</code> 操作符，仅适用于比较对象引用。</li><li><strong>JSON 字符串化</strong> **：通过 **<code>&lt;span class=&quot;ne-text&quot;&gt;JSON.stringify()&lt;/span&gt;</code> 方法比较对象的字符串表示，适用于简单对象。</li><li><strong>深度比较</strong> <strong>：递归地比较对象的属性，适用于复杂对象。</strong></li><li><strong>使用第三方库</strong> **：如 **<strong>Lodash</strong> 或其他深度比较库，处理各种复杂的比较需求。_.isEqual(obj1, obj2)</li></ul><details class="lake-collapse"><summary id="u859f2f44"><span class="ne-text">判断两个对象相等</span></summary><p><strong>在JavaScript中，判断两个对象是否相等或者判断一个对象是否为空，涉及到几个不同的概念和方法。</strong></p><p><strong>JavaScript中的对象是引用类型，这意味着当你比较两个对象时，即使它们包含相同的数据，它们也是不相等的，因为它们在内存中的地址不同。以下是一些判断对象相等的方法：</strong></p><ol><li><strong>严格等于（</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;===&lt;/span&gt;</code> <strong>）</strong> <strong>：这会检查两个对象是否是同一个引用，如果不是同一个引用，则返回</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;false&lt;/span&gt;</code>。</li></ol><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> obj1</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> { </span><span style="color:#E06C75;--shiki-dark:#E06C75;">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> obj2</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> { </span><span style="color:#E06C75;--shiki-dark:#E06C75;">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">obj1</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> ===</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> obj2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 false</span></span></code></pre></div><ol start="2"><li><strong>JSON.stringify()</strong> <strong>：将对象转换为JSON字符串，然后比较字符串是否相同。这种方法适用于简单对象，但对于包含函数、循环引用或特殊对象（如</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;Date&lt;/span&gt;</code>）的对象不适用。</li></ol><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> obj1</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> { </span><span style="color:#E06C75;--shiki-dark:#E06C75;">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> obj2</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> { </span><span style="color:#E06C75;--shiki-dark:#E06C75;">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">JSON</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">stringify</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">obj1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">===</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> JSON</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">stringify</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">obj2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 true</span></span></code></pre></div><ol start="3"><li><strong>使用库</strong> <strong>：有一些库如lodash提供了深度比较功能，可以比较两个对象的内容是否相等。</strong></li></ol><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">import</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> _</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> from</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;lodash&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> obj1</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> { </span><span style="color:#E06C75;--shiki-dark:#E06C75;">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> obj2</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> { </span><span style="color:#E06C75;--shiki-dark:#E06C75;">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">_</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">isEqual</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">obj1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">obj2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 true</span></span></code></pre></div><hr></details><h2 id="如何判断空对象" tabindex="-1"><a class="header-anchor" href="#如何判断空对象"><span>如何判断空对象？</span></a></h2><p><strong>总结</strong></p><p>**包含可枚举 和 不可枚举 **</p><p><strong>Reflect.ownKeys() ( 强烈推荐) :</strong> <strong>返回一个数组，包含对象自身的</strong> <strong>所有属性键</strong> <strong>(包含</strong> <strong>symbol</strong> <strong>)，包括不可枚举的属性和符号属性。</strong></p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">keys</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).</span><span style="color:#E06C75;--shiki-dark:#E06C75;">length</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> ===</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 输出 true</span></span></code></pre></div><p>**Object.getOwnPropertyNames: **方法返回一个数组，包含对象自身的 <strong>所有属性名</strong> <strong>，不管它们是否可枚举。</strong></p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getOwnPropertyNames</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).</span><span style="color:#E06C75;--shiki-dark:#E06C75;">length</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> ===</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 输出 true</span></span></code></pre></div><p><strong>可枚举</strong></p><p><strong>JSON.stringify(obj) === &#39;{}&#39;</strong></p><p><strong>Object.keys(obj).length === 0</strong></p><p><strong>Object.entries(obj).length === 0</strong></p><p><strong>for...in循环</strong></p><h3 id="判断空对象" tabindex="-1"><a class="header-anchor" href="#判断空对象"><span>判断空对象</span></a></h3><details class="lake-collapse"><summary id="u3f72465b"><span class="ne-text">Object.getOwnPropertyNames()或者Reflect.ownKeys()。</span></summary><p><code>&lt;span class=&quot;ne-text&quot;&gt;Object.getOwnPropertyNames()&lt;/span&gt;</code> 和 <code>&lt;span class=&quot;ne-text&quot;&gt;Reflect.ownKeys()&lt;/span&gt;</code> 是 JavaScript 中用于获取对象自身属性的方法，包括不可枚举的属性和符号属性。这两个方法都可以帮助你判断一个对象是否为空，但它们有一些区别。</p><h3 id="object-getownpropertynames" tabindex="-1"><a class="header-anchor" href="#object-getownpropertynames"><span>Object.getOwnPropertyNames()</span></a></h3><p><code>&lt;span class=&quot;ne-text&quot;&gt;Object.getOwnPropertyNames()&lt;/span&gt;</code> 方法返回一个数组，包含对象自身的所有属性名，不管它们是否可枚举。</p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> obj</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> { </span><span style="color:#E06C75;--shiki-dark:#E06C75;">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;b&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  value</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  enumerable</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">false</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getOwnPropertyNames</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 [&quot;a&quot;, &quot;b&quot;]</span></span></code></pre></div><p><strong>在这个例子中，</strong><code>&lt;span class=&quot;ne-text&quot;&gt;&quot;b&quot;&lt;/span&gt;</code> 属性是不可枚举的，但 <code>&lt;span class=&quot;ne-text&quot;&gt;Object.getOwnPropertyNames()&lt;/span&gt;</code> 仍然能够获取到它。</p><h3 id="reflect-ownkeys" tabindex="-1"><a class="header-anchor" href="#reflect-ownkeys"><span>Reflect.ownKeys()</span></a></h3><p><code>&lt;span class=&quot;ne-text&quot;&gt;Reflect.ownKeys()&lt;/span&gt;</code> 方法返回一个数组，包含对象自身的所有属性键，包括不可枚举的属性和符号属性。</p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> obj</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> { </span><span style="color:#E06C75;--shiki-dark:#E06C75;">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;b&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  value</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  enumerable</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">false</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> symbol</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Symbol</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;c&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E06C75;--shiki-dark:#E06C75;">symbol</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Reflect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">ownKeys</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 [&quot;a&quot;, &quot;b&quot;, Symbol(c)]</span></span></code></pre></div><p><strong>在这个例子中，</strong><code>&lt;span class=&quot;ne-text&quot;&gt;Reflect.ownKeys()&lt;/span&gt;</code> 不仅获取了不可枚举的属性 <code>&lt;span class=&quot;ne-text&quot;&gt;&quot;b&quot;&lt;/span&gt;</code>，还获取了符号属性 <code>&lt;span class=&quot;ne-text&quot;&gt;Symbol(c)&lt;/span&gt;</code>。</p><p><strong>要判断一个对象是否为空，你可以使用这两个方法中的任何一个来获取对象的所有自身属性键，然后检查返回的数组是否为空。</strong></p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> obj</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用 Object.getOwnPropertyNames()</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getOwnPropertyNames</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).</span><span style="color:#E06C75;--shiki-dark:#E06C75;">length</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> ===</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用 Reflect.ownKeys()</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Reflect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">ownKeys</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).</span><span style="color:#E06C75;--shiki-dark:#E06C75;">length</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> ===</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 true</span></span></code></pre></div><p>**在这两个例子中，如果对象 **<code>&lt;span class=&quot;ne-text&quot;&gt;obj&lt;/span&gt;</code> 没有任何自身的属性，那么这两个方法都会返回一个空数组，数组的长度为0，表示对象为空。</p><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h3><ul><li><code>&lt;span class=&quot;ne-text&quot;&gt;Object.getOwnPropertyNames()&lt;/span&gt;</code>：返回对象自身的所有属性名，包括不可枚举的属性。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;Reflect.ownKeys()&lt;/span&gt;</code>：返回对象自身的所有属性键，包括不可枚举的属性和符号属性。</li></ul><p><strong>在大多数情况下，</strong><code>&lt;span class=&quot;ne-text&quot;&gt;Reflect.ownKeys()&lt;/span&gt;</code> 提供了更全面的结果，因为它还包括了符号属性。如果你只需要获取字符串属性名，那么 <code>&lt;span class=&quot;ne-text&quot;&gt;Object.getOwnPropertyNames()&lt;/span&gt;</code> 就足够了。在选择使用哪个方法时，需要根据你的具体需求来决定。</p></details><details class="lake-collapse"><summary id="u757a8b40"><span class="ne-text">判断空对象</span></summary><p><strong>空对象指的是一个对象没有任何可枚举的属性。以下是一些判断对象是否为空的方法：</strong></p><ol><li><strong>for...in循环</strong> <strong>：使用</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;for...in&lt;/span&gt;</code>循环遍历对象的属性，如果没有属性执行，那么对象为空。</li></ol><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> obj</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> key</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> in</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">hasOwnProperty</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Object is not empty&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Object is empty&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><ol start="2"><li><strong>Object.keys()</strong> <strong>：这个方法返回一个包含对象所有自身可枚举属性的数组，如果数组长度为0，则对象为空。</strong></li></ol><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> obj</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">keys</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).</span><span style="color:#E06C75;--shiki-dark:#E06C75;">length</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> ===</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 true</span></span></code></pre></div><ol start="3"><li><strong>JSON.stringify()</strong> <strong>：将对象转换为JSON字符串，空对象转换后的结果是一个空的大括号</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;{}&lt;/span&gt;</code>。</li></ol><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> obj</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">JSON</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">stringify</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">===</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;{}&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 true</span></span></code></pre></div><ol start="4"><li><strong>Object.entries()</strong> <strong>：这个方法返回一个给定对象自身可枚举属性的键值对数组，如果数组长度为0，则对象为空。</strong></li></ol><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> obj</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">entries</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).</span><span style="color:#E06C75;--shiki-dark:#E06C75;">length</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> ===</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 true</span></span></code></pre></div><p><strong>请注意，这些方法只能检测对象是否有可枚举的属性，它们不会检查对象的原型链上的属性。如果需要检查对象是否完全没有属性（包括不可枚举的属性和原型链上的属性），可以使用</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;Object.getOwnPropertyNames()&lt;/span&gt;</code>或者 <code>&lt;span class=&quot;ne-text&quot;&gt;Reflect.ownKeys()&lt;/span&gt;</code>。</p><hr></details><h2 id="数组的foreach和map方法有哪些区别-常用哪些方法去对数组进行增、删、改" tabindex="-1"><a class="header-anchor" href="#数组的foreach和map方法有哪些区别-常用哪些方法去对数组进行增、删、改"><span>数组的forEach和map方法有哪些区别？常用哪些方法去对数组进行增、删、改</span></a></h2><details class="lake-collapse"><summary id="u676907e8"><span class="ne-text">拓展</span></summary><p><code>&lt;span class=&quot;ne-text&quot;&gt;forEach&lt;/span&gt;</code> 和 <code>&lt;span class=&quot;ne-text&quot;&gt;map&lt;/span&gt;</code> 是JavaScript中用于数组遍历和元素处理的两个常用方法，它们有一些关键的区别：</p><h3 id="foreach-方法" tabindex="-1"><a class="header-anchor" href="#foreach-方法"><span>forEach 方法</span></a></h3><ul><li><code>&lt;span class=&quot;ne-text&quot;&gt;forEach&lt;/span&gt;</code> 方法会对数组的每个元素执行一次提供的函数。</li><li>**它不返回任何值，即返回 **<code>&lt;span class=&quot;ne-text&quot;&gt;undefined&lt;/span&gt;</code>。</li><li><strong>它不能被中断，即使在回调函数中抛出错误，</strong><code>&lt;span class=&quot;ne-text&quot;&gt;forEach&lt;/span&gt;</code> 也会继续执行直到数组的末尾。</li><li><strong>它常用于执行副作用操作，如数组的遍历、累加求和等。</strong></li></ul><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> numbers</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">numbers</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">forEach</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">number</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">number</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出每个元素</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">});</span></span></code></pre></div><h3 id="map-方法" tabindex="-1"><a class="header-anchor" href="#map-方法"><span>map 方法</span></a></h3><ul><li><code>&lt;span class=&quot;ne-text&quot;&gt;map&lt;/span&gt;</code> 方法也遍历数组的每个元素，但会返回一个新数组，新数组的元素是原数组元素经过回调函数处理后的结果。</li><li><strong>它不会更改原数组，而是创建一个新数组。</strong></li><li><strong>它可以通过返回值进行链式调用。</strong></li><li><strong>它常用于对数组中的每个元素进行转换或计算，并获取一个新的数组。</strong></li></ul><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> numbers</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> squares</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> numbers</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">map</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">number</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  return</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> number</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> *</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> number</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 返回每个元素的平方</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">squares</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 [1, 4, 9]</span></span></code></pre></div><h3 id="增删改方法" tabindex="-1"><a class="header-anchor" href="#增删改方法"><span>增删改方法</span></a></h3><p><strong>对于数组的增、删、改操作，JavaScript 提供了多种方法：</strong></p><p><strong>增加元素：</strong></p><ul><li><code>&lt;span class=&quot;ne-text&quot;&gt;push(...items)&lt;/span&gt;</code>：在数组末尾添加一个或多个元素，并返回新的长度。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;unshift(...items)&lt;/span&gt;</code>：在数组开头添加一个或多个元素，并返回新的长度。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;splice(index, 0, ...items)&lt;/span&gt;</code>：在指定位置添加元素。</li></ul><p><strong>删除元素：</strong></p><ul><li><code>&lt;span class=&quot;ne-text&quot;&gt;pop()&lt;/span&gt;</code>：删除数组的最后一个元素，并返回被删除的元素。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;shift()&lt;/span&gt;</code>：删除数组的第一个元素，并返回被删除的元素。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;splice(index, count)&lt;/span&gt;</code>：删除指定位置的元素。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;filter(callback)&lt;/span&gt;</code>：创建一个新数组，包含通过测试的所有元素。</li></ul><p><strong>修改元素：</strong></p><ul><li><code>&lt;span class=&quot;ne-text&quot;&gt;splice(index, count, ...items)&lt;/span&gt;</code>：删除指定位置的元素，并可在该位置添加新元素。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;slice()&lt;/span&gt;</code> 结合 <code>&lt;span class=&quot;ne-text&quot;&gt;concat()&lt;/span&gt;</code> 或 <code>&lt;span class=&quot;ne-text&quot;&gt;push()&lt;/span&gt;</code>：创建一个数组的副本，然后添加或修改元素。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;map(callback)&lt;/span&gt;</code>：创建一个新数组，其元素是原数组元素经过回调函数处理后的结果。</li></ul><p><strong>其他常用方法：</strong></p><ul><li><code>&lt;span class=&quot;ne-text&quot;&gt;concat(...items)&lt;/span&gt;</code>：创建一个新数组，包含原数组的元素和/或额外的参数。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;slice(start, end)&lt;/span&gt;</code>：提取原数组的一部分，返回一个新数组。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;reduce(callback, initialValue)&lt;/span&gt;</code>：将数组中的值通过回调函数处理后缩减为单一的返回值。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;find(callback)&lt;/span&gt;</code>：返回数组中满足提供的测试函数的第一个元素的值。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;some(callback)&lt;/span&gt;</code>：检测数组中至少有一个元素通过测试。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;every(callback)&lt;/span&gt;</code>：检测数组的所有元素是否都通过了测试。</li></ul><p><strong>选择哪种方法取决于你的具体需求，比如是否需要修改原数组、是否需要返回新数组、是否需要执行复杂的条件检查等。</strong></p><hr></details><h2 id="闭包和作用域" tabindex="-1"><a class="header-anchor" href="#闭包和作用域"><span>闭包和作用域</span></a></h2><p><strong>把闭包简单理解成“定义在一个函数内部的函数”</strong> <strong>。</strong></p><p><a href="https://blog.csdn.net/Ed7zgeE9X/article/details/133819940" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/Ed7zgeE9X/article/details/133819940</a></p><p><a href="https://blog.csdn.net/Ed7zgeE9X/article/details/133819940" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/Ed7zgeE9X/article/details/133819940</a></p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/45821596/1725869264919-9ef89373-00cd-4fa7-b6b5-798dfa253eeb.jpeg" alt="" loading="lazy">## 实现一个类以关键字new功能的函数</p><p><strong>相当于创建一个 空对象,并将其 原型 和 this指向 绑定其构造函数 然后返回对象</strong></p><p><strong>在js中new关键字主要做了：</strong></p><p><strong>首先创建一个空对象，这个对象会作为执行new构造函数之后返回的对象实例，</strong></p><p><strong>将创建的空对象原型（</strong><code>&lt;span class=&quot;ne-text&quot;&gt;__proto__&lt;/span&gt;</code>）指向构造函数的prototype属性，</p><p><strong>同时将这个空对象赋值给构造函数内部的this，并执行构造函数逻辑，</strong></p><p><strong>根据构造函数的执行逻辑，返回初始创建的对象或构造函数的显式返回值。</strong></p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> newFn</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(...</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> constructor</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">shift</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> obj</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">create</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">constructor</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">prototype</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> result</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> constructor</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">apply</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  return</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> typeof</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> result</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> ===</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;object&quot;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> result</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> !==</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> null</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> ?</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> result</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> :</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Person</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> p</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> newFn</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">Person</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Jerome&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;p.name :&gt;&gt; &quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">p</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// p.name :&gt;&gt;  Jerome</span></span></code></pre></div><p><strong>在编程中，“关键字new功能”通常指的是使用</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;new&lt;/span&gt;</code>关键字来创建一个类的新实例。下面我将提供一个简单的示例，展示如何在JavaScript中实现一个类，并使用 <code>&lt;span class=&quot;ne-text&quot;&gt;new&lt;/span&gt;</code>关键字来创建其实例。</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 定义一个类</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Person</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 构造函数，用于初始化实例</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  constructor</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">age</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 实例的name属性</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">age</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> age</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;   </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 实例的age属性</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 实例方法，可以被所有实例调用</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  greet</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">\`Hello, my name is </span><span style="color:#C678DD;--shiki-dark:#C678DD;">\${</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#C678DD;--shiki-dark:#C678DD;">}</span><span style="color:#98C379;--shiki-dark:#98C379;"> and I am </span><span style="color:#C678DD;--shiki-dark:#C678DD;">\${</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">age</span><span style="color:#C678DD;--shiki-dark:#C678DD;">}</span><span style="color:#98C379;--shiki-dark:#98C379;"> years old.\`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用new关键字创建Person类的实例</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> person1</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Person</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Alice&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">30</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 调用实例方法</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">person1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">greet</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出: Hello, my name is Alice and I am 30 years old.</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在这个例子中，</strong><code>&lt;span class=&quot;ne-text&quot;&gt;Person&lt;/span&gt;</code>是一个类，它有一个构造函数 <code>&lt;span class=&quot;ne-text&quot;&gt;constructor&lt;/span&gt;</code>，用于初始化实例的属性（<code>&lt;span class=&quot;ne-text&quot;&gt;name&lt;/span&gt;</code>和 <code>&lt;span class=&quot;ne-text&quot;&gt;age&lt;/span&gt;</code>）。<code>&lt;span class=&quot;ne-text&quot;&gt;greet&lt;/span&gt;</code>是一个实例方法，可以通过创建的实例调用。</p><p><strong>当你使用</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;new Person(&#39;Alice&#39;, 30)&lt;/span&gt;</code>时，你实际上是在创建一个新的 <code>&lt;span class=&quot;ne-text&quot;&gt;Person&lt;/span&gt;</code>对象，并且调用了它的构造函数来初始化属性。之后，你可以使用这个新创建的对象来调用它的方法，比如 <code>&lt;span class=&quot;ne-text&quot;&gt;person1.greet()&lt;/span&gt;</code>。</p><p><strong>如果你需要在其他编程语言中实现类似的功能，请告诉我具体的语言，我可以提供相应的示例。</strong></p><p><a href="https://blog.csdn.net/qq_17335549/article/details/138100619" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/qq_17335549/article/details/138100619</a></p><hr><h2 id="如何实现继承-原型和原型链" tabindex="-1"><a class="header-anchor" href="#如何实现继承-原型和原型链"><span>如何实现继承（原型和原型链）</span></a></h2><p><a href="https://blog.csdn.net/qq_17335549/article/details/138100619" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/qq_17335549/article/details/138100619</a></p><p><strong>使用class语法，用extends进行继承, 或 直接改变对象的__proto__指向。</strong></p><h3 id="总结-2" tabindex="-1"><a class="header-anchor" href="#总结-2"><span>总结</span></a></h3><p><strong>总之关于原型这块记住三句话</strong></p><ol><li><strong>对象有一个内置属性 [[Prototype]]，使用 Object.getPrototypeOf(obj) 获取</strong></li><li><strong>函数有一个公开可访问不可枚举属性 prototype</strong></li><li><strong>函数的 prototype 属性有一个公开可访问的不可枚举属性 constructor，指向函数本身</strong></li></ol><h3 id="_2-4-原型相关的面试题目" tabindex="-1"><a class="header-anchor" href="#_2-4-原型相关的面试题目"><span>2.4 原型相关的面试题目</span></a></h3><h4 id="_2-4-1-说说你对原型和原型链的理解" tabindex="-1"><a class="header-anchor" href="#_2-4-1-说说你对原型和原型链的理解"><span>2.4.1 说说你对原型和原型链的理解</span></a></h4><p><strong>回答问题分文两步</strong></p><p><strong>（1）原型/原型链是什么？【引用上面的三句话即可】</strong></p><p><strong>在 js 中每个对象都有一个内置属性 [[prototype]]，可以使用 Object.getPrototypeOf 来获取，指向一个对象；同样的，这个指向的对象也有内置属性[[prototype]] 这样就构成了原型链，原型链最终会指向 Object.prototype，而 Object.prototype 的内置属性 [[prototype]] 指向 null.</strong></p><p><strong>同时函数都有一个公开可访问属性 prototype，这个 prototype 属性又有一个 constructor 属性指向函数本身。</strong></p><p><strong>（2）原型链有什么用？【属性查找、继承、扩展、属性和方法的共享】</strong></p><p><strong>当访问对象的一个属性的时候，如果自身没有找到，就会去原型链上查找，直到找到该属性，或者遍历完完整的原型链，也就是说可以使用原型链实现继承功能。对象可以通过原型链继承父对象的属性或者方法【继承】</strong></p><p><strong>也可以使用原型链对对象进行扩展，通过修改原型对象，可以给所有的实例进行属性的增加或修改。如果我们在一个对象的原型上添加属性或者方法，所有基于该原型的实例都会自动继承这些属性和方法，这样可以在不修改每个实例的情况下，实现对对象的扩展【扩展】【注意这一点也是原型链继承的弊端】【也是实例之间属性和方法的共享的方法】</strong></p><h3 id="六、寄生式组合继承" tabindex="-1"><a class="header-anchor" href="#六、寄生式组合继承"><span>六、寄生式组合继承</span></a></h3><figure><img src="https://cdn.nlark.com/yuque/0/2024/png/45821596/1725871667537-b2b65050-185e-4356-9299-a56602e8b8bf.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>我不喜欢这个名字，因为他听起来很高端的样子，还不如叫 es5 继承终极版！</strong></p><p><strong>很简单，把 new Person() 换成 Object.create(Person.prototype)就行了。</strong></p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Person</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">age</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;mike&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">age</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        num</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E06C75;--shiki-dark:#E06C75;">age</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">prototype</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getName</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Student</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">gender</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">age</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 重点1</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    Person</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">call</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">age</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">gender</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> gender</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 重点2</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Student</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">prototype</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">create</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">prototype</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 重点3</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Student</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">prototype</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">constructor</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> Student</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> student</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Student</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;man&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">12</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> student1</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Student</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;women&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">25</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getPrototypeOf</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">student</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 修改第一个实例</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">student</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">age</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">num</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 3</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;第一个学生&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">student</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">age</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">student</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getName</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;第二个学生&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">student1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">age</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">student1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getName</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">())</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>这里面其实应用到了，Object.create 的原理，这也是一个面试题目，而且也有可能让你手写一个 Object.create 请看</strong><a href="https://blog.csdn.net/qq_17335549/article/details/128050681" target="_blank" rel="noopener noreferrer">这篇文章。</a></p><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h3><p><strong>好吧，整半天就一套代码，如果面试官让你写 es5 的继承，你直接上来就终极版代码安排，我想他应该没有什么可问的了吧，所以你别看概念上那么继承方式那么多，但是实际应用就是一个！一定要记住，可别再翻车了。</strong></p><p><strong>那么还有最后一个问题就是 es6 中的继承了！</strong></p><h3 id="七、es6-继承" tabindex="-1"><a class="header-anchor" href="#七、es6-继承"><span>七、es6 继承</span></a></h3><h4 id="_7-1-代码实现" tabindex="-1"><a class="header-anchor" href="#_7-1-代码实现"><span>7.1 代码实现</span></a></h4><p><strong>使用类 class + extends 实现继承。主要还是学会使用class 类的各种语法，有几个关键点</strong></p><p><strong>class 中只能有一个构造函数 constructor</strong></p><p><strong>可以使用 static 定义静态属性和方法，直接使用类名调用</strong></p><p><strong>子类使用 extends 关键字继承父类，且只能继承一个【说明 es6 原生也不支持多重继承】</strong></p><p><strong>子类在构造函数 constructor 中使用 super 来调用父类的构造函数，并且可以传递参数</strong></p><p><strong>子类中的方法和父类的同名，会覆盖父类的方法</strong></p><p><strong>必须使用 new 操作符，创建 class 示例</strong></p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Person</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 定义属性</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    lang</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;zh&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 定义静态属性</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    static</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> nation</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;china&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 构造函数</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    constructor</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">age</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;mike&#39;</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">age</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">            num</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E06C75;--shiki-dark:#E06C75;">age</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 定义方法</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    getName</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 定义静态方法</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    static</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> getDes</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;hello word&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Student</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> extends</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Person</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    constructor</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">gender</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">age</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">        super</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">age</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">gender</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> gender</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> student</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Student</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;man&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">12</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> student1</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Student</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;women&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">25</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">student</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">age</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">num</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 234</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;静态属性方法&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">nation</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getDes</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;第一个学生&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">student</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">lang</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">student</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getName</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;第二个学生&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">student1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">student</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getName</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">())</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>7.2 面试题目</strong></p><p><strong>这个时候肯定会问 es5 中的类和 es6 中的类的区别了，用自己的话总结一些这篇文章的内容即可。</strong></p><p><strong>7.2.1 es5 中类 es6 中的继承有什么区别</strong></p><p><strong>注意 es6 的class 有一个私有属性和方法，以#开头的，这个倒是不常用。</strong></p><p><strong>7.2.2 ts 中的类和 es6 中的类有什么区别</strong></p><p><strong>ts 中有类型检查</strong></p><p><strong>ts 有访问描述符 private 、public 、protected 等，js 中只有 #开头描述的私有属性</strong></p><p><strong>ts 中有抽象类和方法的概念</strong></p><p><strong>抽象类可以包含抽象方法，而接口只能定义方法的签名</strong></p><p><strong>ts 支持范型</strong></p><hr><h2 id="箭头函数和普通函数有什么区别" tabindex="-1"><a class="header-anchor" href="#箭头函数和普通函数有什么区别"><span>箭头函数和普通函数有什么区别</span></a></h2><p><strong>箭头函数</strong> <strong>不会创建自身的this</strong> <strong>，只会从上一级继承this，箭头函数的this在定义的时候就已经确认了，之后不会改变。</strong></p><p><strong>同时箭头函数</strong> <strong>无法作为构造函数使用</strong> <strong>，</strong></p><p><strong>没有自身的</strong> <strong>prototype</strong> <strong>，</strong></p><p><strong>也没有</strong> <strong>arguments</strong> <strong>。</strong></p><p><a href="https://blog.csdn.net/weixin_46098577/article/details/131005395" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/weixin_46098577/article/details/131005395</a></p><p><a href="https://blog.csdn.net/weixin_46098577/article/details/131005395" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/weixin_46098577/article/details/131005395</a></p><figure><img src="https://cdn.nlark.com/yuque/0/2024/png/45821596/1725874334575-bdf67e0e-711e-4e31-9111-719cfc753348.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/45821596/1725875639401-9aeff409-42f7-44b6-bd00-74d75ecf6fe7.jpeg" alt="" loading="lazy">## 迭代器(iterator)接口和生成器(generator)函数的关系</p><p><strong>任意一个对象实现了遵守迭代器协议的[Symbol.iterator]方法，那么该对象就可以调用[Symbol.iterator]返回一个遍历器对象。</strong></p><p><strong>生成器函数就是遍历器生成函数，故可以把generator赋值给对象的[Symbol.iterator]属性，从而使该对象具有迭代器接口。</strong></p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> ClassRoom</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  constructor</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">address</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">students</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">address</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> address</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">students</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> students</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  entry</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">student</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">students</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">push</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">student</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  *</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Symbol</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">iterator</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]() {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    yield*</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">students</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // [Symbol.iterator]() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //   let index = 0;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //   return {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //     next: () =&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //       if (index &lt; this.students.length) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //         return { done: false, value: this.students[index++] };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //       } else {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //         return { done: true, value: undefined };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //       }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //     },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //     return: () =&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //       console.log(&quot;iterator has early termination&quot;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //       return { done: true, value: undefined };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //     },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //   };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> classOne</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> ClassRoom</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;7-101&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;teach-one-room&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, [</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;rose&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;jack&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;lily&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;james&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> stu</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> of</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> classOne</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;stu :&gt;&gt; &quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">stu</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // stu :&gt;&gt;  rose</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // stu :&gt;&gt;  jack</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // stu :&gt;&gt;  lily</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // stu :&gt;&gt;  james</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // if (stu === &quot;lily&quot;) return;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="浏览器的事件循环机制" tabindex="-1"><a class="header-anchor" href="#浏览器的事件循环机制"><span>浏览器的事件循环机制</span></a></h2><p><strong>先进行宏任务(script)内的内容;</strong></p><p><strong>再去执行微任务队列{</strong></p><p><strong>--消息队列有优先级 :按照任务类型分(chrome浏览器中)</strong></p><p><strong>--微队列 [最高] promise.then方法</strong></p><p><strong>--交互队列 [高] 点击操作等</strong></p><p><strong>--延时队列 [中] 延时,循环延时}</strong></p><p><strong>然后执行微任务如果有嵌套看先执行宏任务在再按照优先级执行微任务</strong></p><hr><h2 id="列举宿主对象、内置对象、原生对象并说明其定义" tabindex="-1"><a class="header-anchor" href="#列举宿主对象、内置对象、原生对象并说明其定义"><span>列举宿主对象、内置对象、原生对象并说明其定义</span></a></h2><figure><img src="https://cdn.nlark.com/yuque/0/2024/webp/45821596/1726196648392-22b865e6-a191-4e16-bd8f-67cf6d102914.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><details class="lake-collapse"><summary id="u02d03fba"></summary><p><strong>在JavaScript中，宿主对象（Host Objects）、内置对象（Built-in Objects）和原生对象（Native Objects）是与执行环境相关的概念。以下是它们的定义和区别：</strong></p><h3 id="宿主对象-host-objects" tabindex="-1"><a class="header-anchor" href="#宿主对象-host-objects"><span>宿主对象（Host Objects）</span></a></h3><p><strong>宿主对象是由JavaScript运行环境（如浏览器或Node.js）提供的，而不是由ECMAScript规范定义的对象。宿主对象的具体特性和行为可能会因不同的宿主环境而异。</strong></p><ul><li><strong>定义</strong> <strong>：宿主对象是依赖于宿主环境（如浏览器或服务器）的对象，它们提供了与宿主环境交互的能力。</strong></li><li><strong>例子</strong> <strong>：</strong></li><li><strong>在浏览器中，</strong><code>&lt;span class=&quot;ne-text&quot;&gt;window&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;document&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;XMLHttpRequest&lt;/span&gt;</code> 等都是宿主对象。</li><li><strong>在Node.js中，</strong><code>&lt;span class=&quot;ne-text&quot;&gt;global&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;process&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;console&lt;/span&gt;</code> 等都是宿主对象。</li></ul><h3 id="内置对象-built-in-objects" tabindex="-1"><a class="header-anchor" href="#内置对象-built-in-objects"><span>内置对象（Built-in Objects）</span></a></h3><p><strong>内置对象是由ECMAScript规范定义的对象，它们在任何JavaScript环境中都是可用的。这些对象提供了核心功能，如数据类型、错误处理、数学计算等。</strong></p><ul><li><strong>定义</strong> <strong>：内置对象是ECMAScript规范中定义的对象，它们是语言的一部分，不依赖于宿主环境。</strong></li><li><strong>例子</strong> <strong>：</strong></li><li><code>&lt;span class=&quot;ne-text&quot;&gt;Object&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;Array&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;String&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;Number&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;Boolean&lt;/span&gt;</code> 等是内置对象，用于表示基本数据结构。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;Date&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;Math&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;JSON&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;Error&lt;/span&gt;</code> 等也是内置对象，提供了特定的功能。</li></ul><h3 id="原生对象-native-objects" tabindex="-1"><a class="header-anchor" href="#原生对象-native-objects"><span>原生对象（Native Objects）</span></a></h3><p><strong>原生对象通常是指那些直接由JavaScript引擎实现的对象，包括内置对象和宿主对象。在某些文献中，&quot;原生对象&quot;这个术语可能与&quot;内置对象&quot;互换使用，但在严格意义上，原生对象包括了所有由JavaScript引擎直接实现的对象，无论是由ECMAScript规范定义的还是由宿主环境提供的。</strong></p><ul><li><strong>定义</strong> <strong>：原生对象是由JavaScript引擎实现的对象，包括ECMAScript规范定义的对象和宿主环境提供的对象。</strong></li><li><strong>例子</strong> <strong>：</strong></li><li><strong>同内置对象和宿主对象的例子。</strong></li></ul><h3 id="总结-3" tabindex="-1"><a class="header-anchor" href="#总结-3"><span>总结</span></a></h3><ul><li><strong>宿主对象</strong> <strong>：依赖于宿主环境的对象，它们提供了与宿主环境交互的能力。</strong></li><li><strong>内置对象</strong> <strong>：由ECMAScript规范定义的对象，是JavaScript语言的核心组成部分。</strong></li><li><strong>原生对象</strong> <strong>：由JavaScript引擎实现的对象，包括内置对象和宿主对象。</strong></li></ul><p><strong>在实际开发中，了解这些对象的来源和特性有助于更好地理解和使用JavaScript的各种功能。</strong></p><hr></details><h2 id="和-的区别" tabindex="-1"><a class="header-anchor" href="#和-的区别"><span>=== 和==的区别？</span></a></h2><details class="lake-collapse"><summary id="u9ad0df5d"></summary><p><strong>在JavaScript中，</strong><code>&lt;span class=&quot;ne-text&quot;&gt;===&lt;/span&gt;</code> 和 <code>&lt;span class=&quot;ne-text&quot;&gt;==&lt;/span&gt;</code> 是用于比较两个值的运算符，但它们在比较时的行为和规则有所不同。</p><h3 id="严格相等运算符-span-class-ne-text-span" tabindex="-1"><a class="header-anchor" href="#严格相等运算符-span-class-ne-text-span"><span>严格相等运算符 (<code>&lt;span class=&quot;ne-text&quot;&gt;===&lt;/span&gt;</code>)</span></a></h3><ul><li><strong>类型和值都相等</strong> <strong>：</strong><code>&lt;span class=&quot;ne-text&quot;&gt;===&lt;/span&gt;</code> 运算符称为严格相等运算符，它不仅比较两个值的类型，还比较它们的值。如果两个值的类型不同，即使它们的值看起来相同，<code>&lt;span class=&quot;ne-text&quot;&gt;===&lt;/span&gt;</code> 也会返回 <code>&lt;span class=&quot;ne-text&quot;&gt;false&lt;/span&gt;</code>。</li><li><strong>不进行类型转换</strong> **：使用 **<code>&lt;span class=&quot;ne-text&quot;&gt;===&lt;/span&gt;</code> 时，如果比较的两个值类型不同，不会尝试进行任何类型转换，直接返回 <code>&lt;span class=&quot;ne-text&quot;&gt;false&lt;/span&gt;</code>。</li><li><strong>例子</strong> <strong>：</strong></li></ul><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> ===</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 3</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // true</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">&#39;3&#39;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> ===</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 3</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // false，因为一个是字符串，一个是数字</span></span></code></pre></div><h3 id="相等运算符-span-class-ne-text-span" tabindex="-1"><a class="header-anchor" href="#相等运算符-span-class-ne-text-span"><span>相等运算符 (<code>&lt;span class=&quot;ne-text&quot;&gt;==&lt;/span&gt;</code>)</span></a></h3><ul><li><strong>只比较值</strong> <strong>：</strong><code>&lt;span class=&quot;ne-text&quot;&gt;==&lt;/span&gt;</code> 运算符称为相等运算符，它只比较两个值的值，而不关心它们的类型。如果两个值的类型不同，JavaScript 会尝试进行类型转换，使它们具有相同的类型，然后再进行比较。</li><li><strong>进行类型转换</strong> <strong>：如果比较的两个值类型不同，</strong><code>&lt;span class=&quot;ne-text&quot;&gt;==&lt;/span&gt;</code> 会根据隐式类型转换规则尝试将它们转换为相同类型，然后再进行比较。</li><li><strong>例子</strong> <strong>：</strong></li></ul><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> ==</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 3</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // true</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">&#39;3&#39;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> ==</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 3</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // true，因为字符串 &#39;3&#39; 被转换为数字 3 后比较</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> ==</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> false</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // true，因为 false 被转换为数字 0 后比较</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">&#39;&#39;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> ==</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // true，因为空字符串被转换为数字 0 后比较</span></span></code></pre></div><h3 id="推荐使用" tabindex="-1"><a class="header-anchor" href="#推荐使用"><span>推荐使用</span></a></h3><p>**通常推荐使用 **<code>&lt;span class=&quot;ne-text&quot;&gt;===&lt;/span&gt;</code> 运算符，因为它不会进行隐式的类型转换，这样可以避免很多由于类型转换导致的意外结果，使代码更加清晰和可靠。只有在你明确需要进行类型转换时，才使用 <code>&lt;span class=&quot;ne-text&quot;&gt;==&lt;/span&gt;</code> 运算符。</p><h3 id="例子" tabindex="-1"><a class="header-anchor" href="#例子"><span>例子</span></a></h3><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用 ===</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">null</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> ===</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> undefined</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // false，因为 null 和 undefined 是不同的类型</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">&#39;0&#39;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> ===</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // false，因为一个是字符串，一个是数字</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用 ==</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">null</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> ==</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> undefined</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // true，JavaScript 会将 null 和 undefined 视为相等</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">&#39;0&#39;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> ==</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // true，因为字符串 &#39;0&#39; 被转换为数字 0</span></span></code></pre></div><p>**在实际开发中，使用 **<code>&lt;span class=&quot;ne-text&quot;&gt;===&lt;/span&gt;</code> 可以减少很多由于类型转换导致的bug，使得比较操作更加安全和可预测。</p><hr></details><h2 id="null-undefined的区别" tabindex="-1"><a class="header-anchor" href="#null-undefined的区别"><span>null,undefined的区别</span></a></h2><p><strong>null</strong> 针对 对象 表示空对象</p><p><strong>undefined</strong> 针对 已经声明但是没有赋值 的 一个具体值</p><ul><li><strong>如果函数没有返回值，它会默认返回</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;undefined&lt;/span&gt;</code>。</li><li>**如果函数需要返回一个空对象，通常会返回 **<code>&lt;span class=&quot;ne-text&quot;&gt;null&lt;/span&gt;</code>。</li></ul><details class="lake-collapse"><summary id="u65e6bd75"><span class="ne-text">拓展</span></summary><p><strong>在JavaScript中，</strong><code>&lt;span class=&quot;ne-text&quot;&gt;null&lt;/span&gt;</code> 和 <code>&lt;span class=&quot;ne-text&quot;&gt;undefined&lt;/span&gt;</code> 是两种表示“没有值”的特殊值，它们用于不同的场景和目的。</p><h3 id="null" tabindex="-1"><a class="header-anchor" href="#null"><span>null</span></a></h3><ul><li><strong>定义</strong> <strong>：</strong><code>&lt;span class=&quot;ne-text&quot;&gt;null&lt;/span&gt;</code> 是一个表示故意赋予的空值的对象，它表示一个变量指向一个空对象。</li><li><strong>用途</strong> <strong>：</strong></li><li><strong>表示一个变量初始化为空，即还没有指向任何对象。</strong></li><li>**表示函数期望返回一个对象，但没有找到合适的返回对象时，返回 **<code>&lt;span class=&quot;ne-text&quot;&gt;null&lt;/span&gt;</code>。</li><li><strong>显式地表示一个空或不存在的对象引用。</strong></li><li><strong>类型</strong> <strong>：</strong><code>&lt;span class=&quot;ne-text&quot;&gt;null&lt;/span&gt;</code> 是 <code>&lt;span class=&quot;ne-text&quot;&gt;Object&lt;/span&gt;</code> 类型（尽管在逻辑上它表示空，但技术上它是一个对象）。</li></ul><h3 id="undefined" tabindex="-1"><a class="header-anchor" href="#undefined"><span>undefined</span></a></h3><ul><li><strong>定义</strong> <strong>：</strong><code>&lt;span class=&quot;ne-text&quot;&gt;undefined&lt;/span&gt;</code> 是一个表示变量已声明但尚未赋值的特殊值。</li><li><strong>用途</strong> <strong>：</strong></li><li><strong>表示变量初始化未完成，即变量存在但还没有被赋予具体的值。</strong></li><li>**表示函数没有返回值时，默认返回 **<code>&lt;span class=&quot;ne-text&quot;&gt;undefined&lt;/span&gt;</code>。</li><li><strong>表示对象中不存在某个属性。</strong></li><li><strong>类型</strong> <strong>：</strong><code>&lt;span class=&quot;ne-text&quot;&gt;undefined&lt;/span&gt;</code> 是 <code>&lt;span class=&quot;ne-text&quot;&gt;Undefined&lt;/span&gt;</code> 类型。</li></ul><h3 id="区别" tabindex="-1"><a class="header-anchor" href="#区别"><span>区别</span></a></h3><ol><li><strong>值的来源</strong> <strong>：</strong></li></ol><ul><li><code>&lt;span class=&quot;ne-text&quot;&gt;null&lt;/span&gt;</code> 是显式赋值的结果。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;undefined&lt;/span&gt;</code> 是变量声明后未初始化的结果。</li></ul><ol start="2"><li><strong>类型</strong> <strong>：</strong></li></ol><ul><li><code>&lt;span class=&quot;ne-text&quot;&gt;typeof null&lt;/span&gt;</code> 返回 <code>&lt;span class=&quot;ne-text&quot;&gt;&quot;object&quot;&lt;/span&gt;</code>（这是一个历史遗留问题，被认为是JavaScript的一个bug）。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;typeof undefined&lt;/span&gt;</code> 返回 <code>&lt;span class=&quot;ne-text&quot;&gt;&quot;undefined&quot;&lt;/span&gt;</code>。</li></ul><ol start="3"><li><strong>用途</strong> <strong>：</strong></li></ol><ul><li><code>&lt;span class=&quot;ne-text&quot;&gt;null&lt;/span&gt;</code> 通常用于表示空或无效的对象引用。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;undefined&lt;/span&gt;</code> 通常用于表示未初始化或不存在的变量。</li></ul><ol start="4"><li><strong>在函数中</strong> <strong>：</strong></li></ol><ul><li>**如果函数没有返回值，它会默认返回 **<code>&lt;span class=&quot;ne-text&quot;&gt;undefined&lt;/span&gt;</code>。</li><li>**如果函数需要返回一个空对象，通常会返回 **<code>&lt;span class=&quot;ne-text&quot;&gt;null&lt;/span&gt;</code>。</li></ul><h3 id="例子-1" tabindex="-1"><a class="header-anchor" href="#例子-1"><span>例子</span></a></h3><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// a 为 undefined，因为变量已声明但未初始化</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> b</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> null</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// b 为 null，因为显式地赋予了空值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> test</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 隐式返回 undefined</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">test</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> test2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  return</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> null</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 显式返回 null</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">test2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 null</span></span></code></pre></div><p>**在实际开发中，选择使用 **<code>&lt;span class=&quot;ne-text&quot;&gt;null&lt;/span&gt;</code> 还是 <code>&lt;span class=&quot;ne-text&quot;&gt;undefined&lt;/span&gt;</code> 取决于你的具体需求和代码的上下文。通常，如果你需要表示一个变量指向一个空对象，使用 <code>&lt;span class=&quot;ne-text&quot;&gt;null&lt;/span&gt;</code>；如果你需要表示一个变量尚未被初始化，使用 <code>&lt;span class=&quot;ne-text&quot;&gt;undefined&lt;/span&gt;</code>。</p><hr></details><h2 id="怎么获取当前日期-年-月-日时-分-秒" tabindex="-1"><a class="header-anchor" href="#怎么获取当前日期-年-月-日时-分-秒"><span>怎么获取当前日期(年-月-日时：分：秒)？</span></a></h2><p><strong>new Date()</strong></p><p><strong>toLocaleString()</strong></p><p><strong>replace(///g, &#39;-&#39;)</strong></p><details class="lake-collapse"><summary id="u9a735264"></summary><p><strong>您的代码中有几个语法错误，我将帮您纠正这些错误，并提供一个正确的示例。您的目标似乎是创建一个日期对象，将其转换为本地字符串表示，然后替换斜杠（</strong><code>&lt;span class=&quot;ne-text&quot;&gt;/&lt;/span&gt;</code>）为破折号（<code>&lt;span class=&quot;ne-text&quot;&gt;-&lt;/span&gt;</code>）。</p><p><strong>以下是修正后的代码：</strong></p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 创建一个新的Date对象，它将包含当前的日期和时间</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> a</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Date</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 将日期转换为本地字符串格式</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> b</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">toLocaleString</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 替换字符串中的斜杠（/）为破折号（-）</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">b</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> b</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">replace</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">/</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">\\/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">/</span><span style="color:#C678DD;--shiki-dark:#C678DD;">g</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;-&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">b</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出格式化后的日期和时间</span></span></code></pre></div><p><strong>在这段代码中，</strong><code>&lt;span class=&quot;ne-text&quot;&gt;new Date()&lt;/span&gt;</code> 用于创建一个新的日期对象，<code>&lt;span class=&quot;ne-text&quot;&gt;toLocaleString()&lt;/span&gt;</code> 方法用于将日期对象转换为易读的字符串格式。<code>&lt;span class=&quot;ne-text&quot;&gt;replace()&lt;/span&gt;</code> 方法结合正则表达式 <code>&lt;span class=&quot;ne-text&quot;&gt;/\\//g&lt;/span&gt;</code> 用于全局替换字符串中的所有斜杠（<code>&lt;span class=&quot;ne-text&quot;&gt;/&lt;/span&gt;</code>）为破折号（<code>&lt;span class=&quot;ne-text&quot;&gt;-&lt;/span&gt;</code>）。</p><p>**请注意，正则表达式中的双斜杠 **<code>&lt;span class=&quot;ne-text&quot;&gt;//&lt;/span&gt;</code> 是必要的，因为在字符串中单个斜杠是特殊字符的开始，我们需要对它进行转义。<code>&lt;span class=&quot;ne-text&quot;&gt;g&lt;/span&gt;</code> 标志表示全局搜索，即替换所有出现的斜杠，而不仅仅是第一个。</p><p>**如果您希望日期和时间的格式完全按照您的要求（例如，“年-月-日 时:分:秒”），您可能需要使用 **<code>&lt;span class=&quot;ne-text&quot;&gt;toLocaleDateString()&lt;/span&gt;</code> 和 <code>&lt;span class=&quot;ne-text&quot;&gt;toLocaleTimeString()&lt;/span&gt;</code> 方法分别格式化日期和时间，然后组合它们，或者使用 <code>&lt;span class=&quot;ne-text&quot;&gt;options&lt;/span&gt;</code> 参数自定义 <code>&lt;span class=&quot;ne-text&quot;&gt;toLocaleString()&lt;/span&gt;</code> 的输出格式。</p><hr></details><h2 id="类数组-数组-对象-之间的-关系和互相转换方法" tabindex="-1"><a class="header-anchor" href="#类数组-数组-对象-之间的-关系和互相转换方法"><span>类数组,数组,对象,之间的 关系和互相转换方法</span></a></h2><details class="lake-collapse"><summary id="ub26b794b"></summary><p><strong>在JavaScript中，类数组（伪数组）、数组和对象是三种常用的数据结构，它们之间有着不同的特点和用途，但可以通过一些方法相互转换。</strong></p><h3 id="类数组-伪数组-与数组" tabindex="-1"><a class="header-anchor" href="#类数组-伪数组-与数组"><span>类数组（伪数组）与数组</span></a></h3><p><strong>类数组对象不是数组实例，但具有类似数组的特征，如具有索引和</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;length&lt;/span&gt;</code>属性。常见的类数组对象包括函数的 <code>&lt;span class=&quot;ne-text&quot;&gt;arguments&lt;/span&gt;</code>对象和某些DOM集合。</p><h4 id="类数组转数组" tabindex="-1"><a class="header-anchor" href="#类数组转数组"><span>类数组转数组</span></a></h4><ol><li><strong>使用</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;Array.from()&lt;/span&gt;</code>方法：</li></ol><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> args</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  return</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> arguments</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 类数组对象</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">})(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> arr</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// [1, 2, 3]</span></span></code></pre></div><ol start="2"><li><strong>使用扩展运算符（</strong><code>&lt;span class=&quot;ne-text&quot;&gt;...&lt;/span&gt;</code>）：</li></ol><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> args</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  return</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> arguments</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 类数组对象</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">})(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> arr</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [...</span><span style="color:#E06C75;--shiki-dark:#E06C75;">args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]; </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// [1, 2, 3]</span></span></code></pre></div><ol start="3"><li><strong>使用</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;Array.prototype.slice().call(args)&lt;/span&gt;</code>方法：</li></ol><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> args</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  return</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> arguments</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 类数组对象</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">})(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> arr</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">prototype</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">slice</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">call</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// [1, 2, 3]</span></span></code></pre></div><h4 id="数组转类数组" tabindex="-1"><a class="header-anchor" href="#数组转类数组"><span>数组转类数组</span></a></h4><p><strong>数组本身就是类数组，但如果你想要创建一个真正的类数组对象（如</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;arguments&lt;/span&gt;</code>），可以使用 <code>&lt;span class=&quot;ne-text&quot;&gt;Array&lt;/span&gt;</code>对象并设置 <code>&lt;span class=&quot;ne-text&quot;&gt;length&lt;/span&gt;</code>属性。</p><h3 id="数组与对象" tabindex="-1"><a class="header-anchor" href="#数组与对象"><span>数组与对象</span></a></h3><p><strong>数组是有序的数据集合，对象是键值对的集合。</strong></p><h4 id="数组转对象" tabindex="-1"><a class="header-anchor" href="#数组转对象"><span>数组转对象</span></a></h4><ol><li><strong>使用</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;Array.prototype.reduce()&lt;/span&gt;</code>方法：</li></ol><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> arr</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;b&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;c&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> obj</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> arr</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">reduce</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">acc</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">val</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">index</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  acc</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E06C75;--shiki-dark:#E06C75;">val</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> index</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> +</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  return</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> acc</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}, {});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// { a: 1, b: 2, c: 3 }</span></span></code></pre></div><ol start="2"><li><strong>使用对象字面量和数组索引：</strong></li></ol><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> arr</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;b&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;c&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> obj</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E06C75;--shiki-dark:#E06C75;">arr</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  b</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E06C75;--shiki-dark:#E06C75;">arr</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  c</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E06C75;--shiki-dark:#E06C75;">arr</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// { a: &#39;a&#39;, b: &#39;b&#39;, c: &#39;c&#39; }</span></span></code></pre></div><h4 id="对象转数组" tabindex="-1"><a class="header-anchor" href="#对象转数组"><span>对象转数组</span></a></h4><ol><li><strong>使用</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;Object.keys()&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;Object.values()&lt;/span&gt;</code>或 <code>&lt;span class=&quot;ne-text&quot;&gt;Object.entries()&lt;/span&gt;</code>方法：</li></ol><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> obj</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> { </span><span style="color:#E06C75;--shiki-dark:#E06C75;">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">b</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">c</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> keys</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">keys</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> values</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">values</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// [1, 2, 3]</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> entries</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">entries</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// [[&quot;a&quot;, 1], [&quot;b&quot;, 2], [&quot;c&quot;, 3]]</span></span></code></pre></div><ol start="2"><li><strong>使用</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;Array.from()&lt;/span&gt;</code>方法：</li></ol><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> obj</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> { </span><span style="color:#E06C75;--shiki-dark:#E06C75;">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">b</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">c</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> values</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">values</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// [1, 2, 3]</span></span></code></pre></div><ol start="3"><li><strong>使用</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;JSON.stringify()&lt;/span&gt;</code>和 <code>&lt;span class=&quot;ne-text&quot;&gt;JSON.parse()&lt;/span&gt;</code>方法（对于简单对象）：</li></ol><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> obj</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> { </span><span style="color:#E06C75;--shiki-dark:#E06C75;">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">b</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">c</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> arr</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> JSON</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">parse</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">JSON</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">stringify</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// [&quot;a&quot;, 1, &quot;b&quot;, 2, &quot;c&quot;, 3]</span></span></code></pre></div><p><strong>请注意，</strong><code>&lt;span class=&quot;ne-text&quot;&gt;JSON.stringify()&lt;/span&gt;</code>和 <code>&lt;span class=&quot;ne-text&quot;&gt;JSON.parse()&lt;/span&gt;</code>方法在处理对象时会将对象转换为JSON字符串，然后再解析为数组，但这种方法会将键值对转换为连续的元素，而不是键值对的形式。</p><p><strong>通过这些方法，你可以在类数组、数组和对象之间进行灵活的转换，以适应不同的编程场景和需求。</strong></p><hr></details><h2 id="变量提升是什么-与函数提升的区别" tabindex="-1"><a class="header-anchor" href="#变量提升是什么-与函数提升的区别"><span>变量提升是什么？与函数提升的区别？</span></a></h2><details class="lake-collapse"><summary id="u29c582df"></summary><p><strong>在JavaScript中，变量提升（Variable Hoisting）和函数提升（Function Hoisting）是两种不同的行为，它们都与JavaScript的执行上下文和作用域链有关。</strong></p><h3 id="变量提升" tabindex="-1"><a class="header-anchor" href="#变量提升"><span>变量提升</span></a></h3><p><strong>变量提升是指JavaScript引擎在代码执行之前，将变量声明提升到当前作用域的顶部。这意味着变量可以在声明之前就被访问。</strong></p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">myVar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 undefined</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> myVar</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><p><strong>在上面的代码中，尽管</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;myVar&lt;/span&gt;</code>是在 <code>&lt;span class=&quot;ne-text&quot;&gt;console.log&lt;/span&gt;</code>之后声明的，但是由于变量提升，<code>&lt;span class=&quot;ne-text&quot;&gt;myVar&lt;/span&gt;</code>的声明被提升到了作用域顶部，所以在 <code>&lt;span class=&quot;ne-text&quot;&gt;console.log&lt;/span&gt;</code>执行时，<code>&lt;span class=&quot;ne-text&quot;&gt;myVar&lt;/span&gt;</code>已经存在，其值为 <code>&lt;span class=&quot;ne-text&quot;&gt;undefined&lt;/span&gt;</code>。</p><p><strong>对于</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;let&lt;/span&gt;</code>和 <code>&lt;span class=&quot;ne-text&quot;&gt;const&lt;/span&gt;</code>声明的变量，虽然也存在提升，但是它们不会立即被初始化，而是处于一个称为“暂时性死区”（Temporal Dead Zone, TDZ）的状态，直到它们被实际声明。</p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">myLet</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 报错 ReferenceError</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> myLet</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 10</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><h3 id="函数提升" tabindex="-1"><a class="header-anchor" href="#函数提升"><span>函数提升</span></a></h3><p><strong>函数提升与变量提升类似，但是只适用于函数声明，不适用于函数表达式。在函数提升中，函数声明会被提升到当前作用域的顶部。</strong></p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">myFunc</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 报错 TypeError</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">myFunc</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 &quot;Hello, World!&quot;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> myFunc</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Hello, World!&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p><strong>在上面的代码中，尽管</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;myFunc&lt;/span&gt;</code>是在 <code>&lt;span class=&quot;ne-text&quot;&gt;console.log&lt;/span&gt;</code>之后声明的，但是由于函数提升，<code>&lt;span class=&quot;ne-text&quot;&gt;myFunc&lt;/span&gt;</code>的声明被提升到了作用域顶部，所以在 <code>&lt;span class=&quot;ne-text&quot;&gt;console.log&lt;/span&gt;</code>执行时，<code>&lt;span class=&quot;ne-text&quot;&gt;myFunc&lt;/span&gt;</code>已经存在，但是尝试打印一个函数会抛出错误。</p><h3 id="区别-1" tabindex="-1"><a class="header-anchor" href="#区别-1"><span>区别</span></a></h3><ul><li><strong>变量提升</strong> <strong>：适用于所有类型的变量声明（</strong><code>&lt;span class=&quot;ne-text&quot;&gt;var&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;let&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;const&lt;/span&gt;</code>），但是 <code>&lt;span class=&quot;ne-text&quot;&gt;let&lt;/span&gt;</code>和 <code>&lt;span class=&quot;ne-text&quot;&gt;const&lt;/span&gt;</code>声明的变量在初始化之前不能被访问（TDZ）。</li><li><strong>函数提升</strong> <strong>：只适用于函数声明，不适用于函数表达式。函数表达式不会提升，但是变量名会被提升。</strong></li></ul><h3 id="函数表达式与函数声明的区别" tabindex="-1"><a class="header-anchor" href="#函数表达式与函数声明的区别"><span>函数表达式与函数声明的区别</span></a></h3><ul><li><strong>函数声明</strong> <strong>：使用</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;function&lt;/span&gt;</code>关键字，并且函数名是必需的。</li><li><strong>函数表达式</strong> <strong>：通常是一个匿名函数，赋值给一个变量。</strong></li></ul><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">myFuncExpr</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 undefined</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">myFuncExpr</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 报错 TypeError</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> myFuncExpr</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Hello, World!&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">};</span></span></code></pre></div><p><strong>在上面的代码中，</strong><code>&lt;span class=&quot;ne-text&quot;&gt;myFuncExpr&lt;/span&gt;</code>是一个函数表达式，它不会像函数声明那样被提升，所以 <code>&lt;span class=&quot;ne-text&quot;&gt;console.log&lt;/span&gt;</code>输出 <code>&lt;span class=&quot;ne-text&quot;&gt;undefined&lt;/span&gt;</code>，而 <code>&lt;span class=&quot;ne-text&quot;&gt;myFuncExpr()&lt;/span&gt;</code>在执行时抛出错误，因为此时 <code>&lt;span class=&quot;ne-text&quot;&gt;myFuncExpr&lt;/span&gt;</code>还没有被赋值。</p><p><strong>总结来说，变量提升和函数提升是JavaScript在代码执行前对变量和函数声明进行处理的行为，它们对于理解JavaScript的作用域和执行上下文非常重要。</strong></p><hr></details><h2 id="什么是作用域链-如何延长" tabindex="-1"><a class="header-anchor" href="#什么是作用域链-如何延长"><span>什么是作用域链？如何延长？</span></a></h2><p><strong>在jS解释器中查找一个变量或者函数时会首先从当前上下文对象中查找，如果当前上下文对象中不存在，就会向上层上下文中查找，直到找到该变量或者全局上下文时为止。这个查找过程中又上下文对象组成的链表结构就是作用域链。</strong></p><p><strong>通过闭包可以延长作用域链</strong></p><hr><h2 id="如何实现数组的随机排序" tabindex="-1"><a class="header-anchor" href="#如何实现数组的随机排序"><span>如何实现数组的随机排序？</span></a></h2><p><strong>洗牌算法</strong></p><details class="lake-collapse"><summary id="u0c6b52de"></summary><p><strong>在JavaScript中，实现数组的随机排序通常使用Fisher-Yates（也称为Knuth）洗牌算法。这个算法可以确保每个元素都有相同的概率出现在数组的任何位置。</strong></p><p><strong>以下是使用Fisher-Yates算法实现数组随机排序的步骤：</strong></p><ol><li><strong>从数组的最后一个元素开始，随机选择一个元素与当前位置的元素交换。</strong></li><li><strong>移动到前一个元素，重复步骤1，直到遍历完整个数组。</strong></li></ol><p><strong>下面是具体的实现代码：</strong></p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> shuffleArray</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> currentIndex</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">length</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    temporaryValue</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    randomIndex</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 当仍有元素未洗牌时</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  while</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E06C75;--shiki-dark:#E06C75;">currentIndex</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> !==</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 选取一个剩余元素…</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    randomIndex</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Math</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">floor</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Math</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">random</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">*</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> currentIndex</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    currentIndex</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> -=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 与当前元素交换</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    temporaryValue</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E06C75;--shiki-dark:#E06C75;">currentIndex</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E06C75;--shiki-dark:#E06C75;">currentIndex</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E06C75;--shiki-dark:#E06C75;">randomIndex</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E06C75;--shiki-dark:#E06C75;">randomIndex</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> temporaryValue</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  return</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 示例</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> myArray</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">shuffleArray</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">myArray</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在这个函数中，</strong><code>&lt;span class=&quot;ne-text&quot;&gt;currentIndex&lt;/span&gt;</code> 初始化为数组的长度，然后在每次迭代中减少。<code>&lt;span class=&quot;ne-text&quot;&gt;randomIndex&lt;/span&gt;</code> 是从0到 <code>&lt;span class=&quot;ne-text&quot;&gt;currentIndex&lt;/span&gt;</code>（包括 <code>&lt;span class=&quot;ne-text&quot;&gt;currentIndex&lt;/span&gt;</code>）的随机索引。然后，将 <code>&lt;span class=&quot;ne-text&quot;&gt;currentIndex&lt;/span&gt;</code>指向的元素与 <code>&lt;span class=&quot;ne-text&quot;&gt;randomIndex&lt;/span&gt;</code>指向的元素交换。</p><p><strong>这种方法确保每个元素都有相同的概率出现在数组的任何位置，从而实现了真正的随机排序。</strong></p><p><strong>请注意，这个函数会直接修改传入的数组。如果你需要保留原始数组，可以先复制一份数组再进行排序：</strong></p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> originalArray</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> arrayCopy</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [...</span><span style="color:#E06C75;--shiki-dark:#E06C75;">originalArray</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">shuffleArray</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">arrayCopy</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">originalArray</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 原始数组保持不变</span></span></code></pre></div><p><strong>使用扩展运算符（</strong><code>&lt;span class=&quot;ne-text&quot;&gt;...&lt;/span&gt;</code>）可以轻松地复制数组。</p><hr></details><h2 id="dom节点的attribute和property有何区别" tabindex="-1"><a class="header-anchor" href="#dom节点的attribute和property有何区别"><span>dom节点的Attribute和Property有何区别？</span></a></h2><p><strong>1.attribute是HTML元素在标记中定义的属性，</strong></p><p><strong>而property是DOM元素在JavaScript中的属性。</strong></p><p><strong>2.attribute表示初始HTML属性的值，无法反映元素当前的状态，</strong></p><p><strong>而property可以反映元素的实际状态。</strong></p><p><strong>3.通过getAttribute()和setAttribute()方法可以操作attribute,</strong></p><p><strong>通过直接访问DOM元素对象的属性来操作property.</strong></p><details class="lake-collapse"><summary id="u0e6501da"><span class="ne-text">拓展</span></summary><p><strong>在Web开发中，DOM（文档对象模型）节点的属性（Attribute）和特性（Property）是两个相关但不同的概念。它们在JavaScript中的表现和用途有所区别：</strong></p><h3 id="attribute" tabindex="-1"><a class="header-anchor" href="#attribute"><span>Attribute</span></a></h3><ul><li><strong>定义</strong> <strong>：Attribute是定义在HTML标签内的，用于为HTML元素提供额外信息的键值对。</strong></li><li><strong>存储位置</strong> <strong>：Attribute存储在DOM中，可以通过</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;element.getAttribute()&lt;/span&gt;</code>方法访问，也可以通过 <code>&lt;span class=&quot;ne-text&quot;&gt;element.setAttribute()&lt;/span&gt;</code>方法设置。</li><li><strong>表现</strong> <strong>：Attribute通常在HTML标签中可见，例如</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;&lt;input type=&quot;text&quot; value=&quot;Hello&quot;&gt;&lt;/span&gt;</code>中的 <code>&lt;span class=&quot;ne-text&quot;&gt;type&lt;/span&gt;</code>和 <code>&lt;span class=&quot;ne-text&quot;&gt;value&lt;/span&gt;</code>。</li><li><strong>编码</strong> <strong>：Attribute在HTML中是作为字符串存储的，即使它们看起来像数字或其他类型。</strong></li><li><strong>标准化</strong> <strong>：浏览器会根据HTML规范对Attribute进行标准化处理。</strong></li></ul><h3 id="property" tabindex="-1"><a class="header-anchor" href="#property"><span>Property</span></a></h3><ul><li><strong>定义</strong> <strong>：Property是JavaScript中DOM元素对象的属性，它们是可以通过JavaScript访问和修改的。</strong></li><li><strong>存储位置</strong> <strong>：Property是对象的属性，可以通过点符号（</strong><code>&lt;span class=&quot;ne-text&quot;&gt;.&lt;/span&gt;</code>）或方括号（<code>&lt;span class=&quot;ne-text&quot;&gt;[]&lt;/span&gt;</code>）访问和设置，例如 <code>&lt;span class=&quot;ne-text&quot;&gt;element.property&lt;/span&gt;</code>或 <code>&lt;span class=&quot;ne-text&quot;&gt;element[&#39;property&#39;]&lt;/span&gt;</code>。</li><li><strong>表现</strong> <strong>：Property反映了元素的实时状态，它们可能与Attribute相对应，也可能不对应。</strong></li><li><strong>类型</strong> <strong>：Property是JavaScript变量，因此它们具有明确的类型，例如字符串、数字或布尔值。</strong></li><li><strong>更新</strong> <strong>：修改Property可能会影响元素的表现，但不一定影响HTML标签内的Attribute。</strong></li></ul><h3 id="区别-2" tabindex="-1"><a class="header-anchor" href="#区别-2"><span>区别</span></a></h3><ol><li><strong>来源</strong> <strong>：Attribute来自HTML标签，而Property来自DOM元素对象。</strong></li><li><strong>访问方式</strong> <strong>：Attribute通过</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;getAttribute&lt;/span&gt;</code>和 <code>&lt;span class=&quot;ne-text&quot;&gt;setAttribute&lt;/span&gt;</code>方法访问，Property通过点符号或方括号访问。</li><li><strong>同步性</strong> <strong>：对于布尔类型的Attribute和Property，它们通常是同步的，即修改一个另一个也会变。但对于其他类型，如</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;value&lt;/span&gt;</code>属性，它们可能不同步，因为Property可能会被JavaScript代码修改，而Attribute只在HTML中更改。</li><li><strong>类型转换</strong> <strong>：Attribute在HTML中总是字符串，而Property具有JavaScript的类型转换特性。</strong></li></ol><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p><strong>考虑以下HTML元素：</strong></p><div class="language-html" data-ext="html" data-title="html"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">input</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> type</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;text&quot;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> value</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Hello&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><ul><li><strong>Attribute</strong> <strong>：</strong></li><li><code>&lt;span class=&quot;ne-text&quot;&gt;type=&quot;text&quot;&lt;/span&gt;</code>：表示输入字段的类型。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;value=&quot;Hello&quot;&lt;/span&gt;</code>：表示输入字段的初始值。</li><li><strong>Property</strong> <strong>：</strong></li><li><code>&lt;span class=&quot;ne-text&quot;&gt;input.type&lt;/span&gt;</code>：在JavaScript中访问时，<code>&lt;span class=&quot;ne-text&quot;&gt;type&lt;/span&gt;</code>是一个Property，其值为字符串 <code>&lt;span class=&quot;ne-text&quot;&gt;&quot;text&quot;&lt;/span&gt;</code>。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;input.value&lt;/span&gt;</code>：在JavaScript中访问时，<code>&lt;span class=&quot;ne-text&quot;&gt;value&lt;/span&gt;</code>是一个Property，其值为字符串 <code>&lt;span class=&quot;ne-text&quot;&gt;&quot;Hello&quot;&lt;/span&gt;</code>。如果通过JavaScript更改 <code>&lt;span class=&quot;ne-text&quot;&gt;input.value&lt;/span&gt;</code>，输入字段的值会实时更新，但HTML标签中的 <code>&lt;span class=&quot;ne-text&quot;&gt;value&lt;/span&gt;</code> Attribute不会改变。</li></ul><p><strong>在实际开发中，了解Attribute和Property之间的区别对于正确操作DOM元素非常重要。</strong></p><hr></details><h2 id="dom结构操作怎样添加、移除、移动、复制、创建和查找节点" tabindex="-1"><a class="header-anchor" href="#dom结构操作怎样添加、移除、移动、复制、创建和查找节点"><span>dom结构操作怎样添加、移除、移动、复制、创建和查找节点？</span></a></h2><figure><img src="`+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><details class="lake-collapse"><summary id="u534e3128"><span class="ne-text">拓展</span></summary><p><strong>在JavaScript中，操作DOM（文档对象模型）结构是常见的任务，包括添加、移除、移动、复制、创建和查找节点。以下是这些操作的基本方法：</strong></p><h3 id="添加节点" tabindex="-1"><a class="header-anchor" href="#添加节点"><span>添加节点</span></a></h3><p><strong>使用</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;appendChild()&lt;/span&gt;</code>方法将新节点添加到父节点中。</p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> newElement</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">createElement</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;div&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> parentElement</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementById</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;parent&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">parentElement</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">appendChild</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">newElement</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><h3 id="移除节点" tabindex="-1"><a class="header-anchor" href="#移除节点"><span>移除节点</span></a></h3><p><strong>使用</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;removeChild()&lt;/span&gt;</code>方法从DOM中移除节点。</p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> elementToRemove</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementById</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;removeMe&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> parentElement</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> elementToRemove</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">parentNode</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">parentElement</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">removeChild</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">elementToRemove</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><h3 id="移动节点" tabindex="-1"><a class="header-anchor" href="#移动节点"><span>移动节点</span></a></h3><p><strong>移动节点通常是通过先移除再添加的方式实现。</strong></p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> elementToMove</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementById</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;moveMe&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> newParent</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementById</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;newParent&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">newParent</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">appendChild</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">elementToMove</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 相当于移动了节点</span></span></code></pre></div><h3 id="替换节点" tabindex="-1"><a class="header-anchor" href="#替换节点"><span>替换节点</span></a></h3><p><strong>使用</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;replaceChild()&lt;/span&gt;</code>方法替换一个节点。</p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> newElement</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">createElement</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;div&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> oldElement</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementById</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;replaceMe&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> parentElement</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> oldElement</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">parentNode</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">parentElement</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">replaceChild</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">newElement</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">oldElement</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><h3 id="复制节点" tabindex="-1"><a class="header-anchor" href="#复制节点"><span>复制节点</span></a></h3><p><strong>使用</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;cloneNode()&lt;/span&gt;</code>方法复制节点。注意，如果设置为 <code>&lt;span class=&quot;ne-text&quot;&gt;true&lt;/span&gt;</code>，它将复制节点及其所有子节点。</p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> elementToCopy</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementById</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;copyMe&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> copiedElement</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> elementToCopy</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">cloneNode</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 只复制节点，不复制子节点</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> parentElement</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementById</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;parent&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">parentElement</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">appendChild</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">copiedElement</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><h3 id="创建节点" tabindex="-1"><a class="header-anchor" href="#创建节点"><span>创建节点</span></a></h3><p><strong>使用</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;createElement()&lt;/span&gt;</code>方法创建新的元素节点。</p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> newElement</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">createElement</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;p&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><p><strong>使用</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;createTextNode()&lt;/span&gt;</code>方法创建新的文本节点。</p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> newText</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">createTextNode</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;这是一些文本&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><h3 id="查找节点" tabindex="-1"><a class="header-anchor" href="#查找节点"><span>查找节点</span></a></h3><p><strong>使用</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;getElementById()&lt;/span&gt;</code>方法通过ID查找节点。</p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> element</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementById</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;myId&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><p><strong>使用</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;getElementsByClassName()&lt;/span&gt;</code>方法通过类名查找节点列表。</p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> elements</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementsByClassName</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;myClass&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><p><strong>使用</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;getElementsByTagName()&lt;/span&gt;</code>方法通过标签名查找节点列表。</p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> elements</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementsByTagName</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;div&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><p><strong>使用</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;querySelector()&lt;/span&gt;</code>方法通过CSS选择器查找第一个匹配的节点。</p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> element</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">querySelector</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;.myClass&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><p><strong>使用</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;querySelectorAll()&lt;/span&gt;</code>方法通过CSS选择器查找所有匹配的节点列表。</p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> elements</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">querySelectorAll</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;.myClass&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><p><strong>这些是操作DOM结构的基本方法。在实际应用中，你可能需要根据具体情况选择合适的方法来操作DOM。</strong></p><hr></details><h2 id="什么是事件冒泡-它是如何工作的-如何阻止事件冒泡" tabindex="-1"><a class="header-anchor" href="#什么是事件冒泡-它是如何工作的-如何阻止事件冒泡"><span>什么是事件冒泡，它是如何工作的？如何阻止事件冒泡？</span></a></h2><p><strong>事件向上传播到根节点</strong></p><p><strong>event.stopPropagation() 阻止冒泡</strong></p><details class="lake-collapse"><summary id="udc300d37"><span class="ne-text">拓展</span></summary><h3 id="事件冒泡-event-bubbling" tabindex="-1"><a class="header-anchor" href="#事件冒泡-event-bubbling"><span>事件冒泡（Event Bubbling）</span></a></h3><p><strong>事件冒泡是DOM事件传播的一种机制。当一个事件发生在某个元素上时，这个事件会从这个元素开始，逐级向上传播到根节点（document对象）。在这个过程中，每个父节点都会接收到这个事件，从而有机会对它进行处理。</strong></p><h4 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理"><span>工作原理</span></a></h4><ol><li><strong>事件首先在触发它的元素（目标元素）上被处理。</strong></li><li><strong>然后，事件会逐级向上传播到父元素，直到达到根节点（</strong><code>&lt;span class=&quot;ne-text&quot;&gt;document&lt;/span&gt;</code>对象）。</li><li><strong>在这个过程中，任何父元素都有机会捕获并处理这个事件。</strong></li></ol><h4 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例</span></a></h4><p><strong>假设你有以下的HTML结构：</strong></p><div class="language-html" data-ext="html" data-title="html"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">div</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;parent&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">button</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;child&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;点击我&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">button</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><p><strong>并且你有以下的JavaScript代码：</strong></p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> childButton</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementById</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;child&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> parentDiv</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementById</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;parent&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">childButton</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;click&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;按钮被点击&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">parentDiv</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;click&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;容器被点击&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 当你点击按钮时，会按照以下顺序触发事件：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 1. 按钮被点击</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 2. 容器被点击</span></span></code></pre></div><p><strong>在这个例子中，当你点击按钮时，首先会触发按钮上的点击事件，然后事件会冒泡到父容器</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;div&lt;/span&gt;</code>上，触发父容器的点击事件。</p><h3 id="如何阻止事件冒泡" tabindex="-1"><a class="header-anchor" href="#如何阻止事件冒泡"><span>如何阻止事件冒泡</span></a></h3><p><strong>虽然事件冒泡提供了一种强大的事件处理机制，但在某些情况下，你可能不希望事件继续向上传播。为了阻止事件冒泡，你可以使用</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;event.stopPropagation()&lt;/span&gt;</code>方法。</p><h4 id="示例-2" tabindex="-1"><a class="header-anchor" href="#示例-2"><span>示例</span></a></h4><p><strong>继续使用上面的HTML结构，如果你只想处理按钮的点击事件，而不希望触发父容器的点击事件，你可以在按钮的点击事件处理函数中调用</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;event.stopPropagation()&lt;/span&gt;</code>：</p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">childButton</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;click&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;按钮被点击&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  event</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">stopPropagation</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 阻止事件冒泡</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">parentDiv</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;click&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;容器被点击&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">});</span></span></code></pre></div><p><strong>在这个例子中，当你点击按钮时，只会触发按钮上的点击事件，而不会触发父容器的点击事件，因为</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;event.stopPropagation()&lt;/span&gt;</code>阻止了事件的进一步传播。</p><h3 id="总结-4" tabindex="-1"><a class="header-anchor" href="#总结-4"><span>总结</span></a></h3><p><strong>事件冒泡是DOM事件处理中的一个重要概念，它允许事件在DOM树中向上传播。通过理解事件冒泡的工作原理，你可以更有效地控制事件处理逻辑。当需要阻止事件冒泡时，可以使用</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;event.stopPropagation()&lt;/span&gt;</code>方法来实现。</p><hr></details><h2 id="什么是事件捕获-它是如何工作的" tabindex="-1"><a class="header-anchor" href="#什么是事件捕获-它是如何工作的"><span>什么是事件捕获，它是如何工作的？</span></a></h2><p><strong>由外到内执行,捕获时间需要在监听时候添加第三个参数,为true</strong></p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> parentDiv</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementById</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;parent&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> childButton</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementById</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;child&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 在捕获阶段添加事件处理器</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">parentDiv</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;click&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;容器捕获点击&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">true</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 在冒泡阶段添加事件处理器</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">childButton</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;click&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;按钮被点击&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 当你点击按钮时，会按照以下顺序触发事件：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 1. 容器捕获点击</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 2. 按钮被点击</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="lake-collapse"><summary id="ue9a7b684"><span class="ne-text">拓展</span></summary><p><strong>事件捕获（Event Capturing）是DOM事件传播的另一个阶段，与事件冒泡相对。在事件捕获阶段，事件从根节点（document对象）开始，沿着DOM树向下传播到目标元素。这意味着在事件到达目标元素之前，它首先会经过一系列的父元素和祖先元素。</strong></p><h3 id="工作原理-1" tabindex="-1"><a class="header-anchor" href="#工作原理-1"><span>工作原理</span></a></h3><ol><li><strong>事件开始于根节点（document对象）。</strong></li><li><strong>事件沿着DOM树向下传播，直到到达目标元素。</strong></li><li><strong>在这个过程中，每个父元素都有机会捕获并处理事件，这发生在事件到达目标元素之前。</strong></li></ol><h3 id="事件传播的三个阶段" tabindex="-1"><a class="header-anchor" href="#事件传播的三个阶段"><span>事件传播的三个阶段</span></a></h3><ol><li><strong>事件捕获阶段</strong> <strong>：事件从document对象开始，向下传播到目标元素的任何父元素或祖先元素。</strong></li><li><strong>目标阶段</strong> <strong>：事件到达目标元素。</strong></li><li><strong>事件冒泡阶段</strong> <strong>：事件从目标元素向上传播回document对象。</strong></li></ol><h3 id="如何使用事件捕获" tabindex="-1"><a class="header-anchor" href="#如何使用事件捕获"><span>如何使用事件捕获</span></a></h3><p><strong>在JavaScript中，你可以通过在</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;addEventListener&lt;/span&gt;</code>方法中设置第三个参数来指定事件处理器是在捕获阶段还是冒泡阶段被触发。如果你想在捕获阶段触发事件处理器，可以将第三个参数设置为 <code>&lt;span class=&quot;ne-text&quot;&gt;true&lt;/span&gt;</code>。</p><h4 id="示例-3" tabindex="-1"><a class="header-anchor" href="#示例-3"><span>示例</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> parentDiv</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementById</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;parent&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> childButton</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementById</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;child&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 在捕获阶段添加事件处理器</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">parentDiv</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;click&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;容器捕获点击&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">true</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 在冒泡阶段添加事件处理器</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">childButton</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;click&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;按钮被点击&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 当你点击按钮时，会按照以下顺序触发事件：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 1. 容器捕获点击</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 2. 按钮被点击</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在这个例子中，点击按钮会首先触发父容器的点击事件（在捕获阶段），然后才是按钮本身的点击事件（在冒泡阶段）。</strong></p><h3 id="如何阻止事件捕获" tabindex="-1"><a class="header-anchor" href="#如何阻止事件捕获"><span>如何阻止事件捕获</span></a></h3><p><strong>如果你想阻止事件在捕获阶段继续传播，可以使用</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;event.stopPropagation()&lt;/span&gt;</code>方法。这将阻止事件进一步向下传播到目标元素或任何子元素。</p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">parentDiv</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;click&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;容器捕获点击&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  event</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">stopPropagation</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 阻止事件进一步传播</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">true</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">childButton</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;click&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;按钮被点击&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">true</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><p><strong>在这个例子中，由于在父容器的事件处理器中调用了</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;event.stopPropagation()&lt;/span&gt;</code>，点击按钮将不会触发按钮本身的点击事件。</p><h3 id="总结-5" tabindex="-1"><a class="header-anchor" href="#总结-5"><span>总结</span></a></h3><p><strong>事件捕获提供了一种在事件到达目标元素之前处理事件的机制。通过在</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;addEventListener&lt;/span&gt;</code>中设置 <code>&lt;span class=&quot;ne-text&quot;&gt;true&lt;/span&gt;</code>作为第三个参数，你可以在捕获阶段注册事件处理器。这允许你在事件到达目标元素之前进行干预，例如在父元素中捕获事件并阻止它进一步传播。</p><hr></details><h2 id="dom的事件模型" tabindex="-1"><a class="header-anchor" href="#dom的事件模型"><span>dom的事件模型</span></a></h2><figure><img src="`+e+`" alt="1726711353383" tabindex="0" loading="lazy"><figcaption>1726711353383</figcaption></figure><h3 id="dom-事件模型" tabindex="-1"><a class="header-anchor" href="#dom-事件模型"><span>DOM 事件模型</span></a></h3><ul><li><code>&lt;span class=&quot;ne-text&quot;&gt;addEventListener&lt;/span&gt;</code>：绑定事件的监听函数</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;removeEventListener&lt;/span&gt;</code>：移除事件的监听函数</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;dispatchEvent&lt;/span&gt;</code>：触发事件</li></ul><h3 id="事件模型" tabindex="-1"><a class="header-anchor" href="#事件模型"><span>事件模型</span></a></h3><ol><li><strong>由外向内找监听函数就是事件捕获</strong></li><li><strong>在目标节点触发事件</strong></li><li><strong>由内而外找监听函数就是事件冒泡</strong></li></ol><p><strong>事件传播的最上层对象是</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;window&lt;/span&gt;</code>，上例的事件传播顺序，</p><p><strong>在捕获阶段依次为</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;window&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;documen&lt;/span&gt;</code>t、<code>&lt;span class=&quot;ne-text&quot;&gt;html&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;body&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;父节点&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;目标节点&lt;/span&gt;</code>，</p><p><strong>在冒泡阶段依次为</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;目标节点&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;父节点&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;body&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;html&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;document&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;window&lt;/span&gt;</code>。</p><p><strong>DOM事件传播的三个阶段：</strong> <strong>捕获阶段</strong> <strong>，</strong> <strong>目标阶段</strong> **，**<strong>冒泡阶段</strong></p><p><strong>target v.s. currentTarget的区别</strong></p><p><strong>区别</strong></p><p>**e.target - 用户操作的元素 **</p><p>**e.currentTarget-程序员监听的元素 **</p><p><strong>this是e.currentTarget,我个人不推荐使用它</strong></p><p><strong>举例：</strong></p><p>**div&gt;span{文字},用户点击文字 **</p><p>**e.target就是span **</p><p><strong>e.currentTarget就是div</strong></p><figure><img src="https://cdn.nlark.com/yuque/0/2024/png/45821596/1726211840415-e5bacd85-cb38-4886-8695-67e88228be8b.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>e.stopPropagation()：取消冒泡</strong></p><p><strong>e.stopPropagation()可打断冒泡，浏览器不再向上走</strong></p><p><strong>一般用于封装某些独立组件</strong></p><details class="lake-collapse"><summary id="u1bcc7d11"><span class="ne-text">事件委托</span></summary><p><strong>事件委托的优点包括：</strong></p><ol><li><strong>减少内存消耗</strong> <strong>：因为只需要在父元素上设置一个事件处理程序，而不是在每个子元素上都设置。</strong></li><li><strong>动态元素管理</strong> <strong>：对于动态添加到DOM中的元素，不需要单独为它们添加事件处理程序，因为它们会继承父元素的事件处理程序。</strong></li><li><strong>简化代码</strong> <strong>：可以简化事件处理代码，特别是当有多个元素需要相同类型的事件处理时。</strong></li></ol><p><strong>事件委托的实现示例：</strong></p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">html</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">div</span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> id</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;parent&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">button</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;按钮1&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">button</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">button</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;按钮2&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">button</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;!-- 更多按钮 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">javascript</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">复制</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> parentDiv</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementById</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;parent&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">parentDiv</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;click&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> target</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> event</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 事件实际触发的元素</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">tagName</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> ===</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;BUTTON&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;按钮被点击&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">textContent</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">});</span></span></code></pre></div></details><details class="lake-collapse"><summary id="uea7fb95a"><span class="ne-text">拓展</span></summary><p><strong>DOM（文档对象模型）的事件模型描述了如何在用户与页面交互时处理事件。在Web开发中，主要有两种事件模型：DOM Level 0事件模型和DOM Level 2事件模型。</strong></p><h3 id="dom-level-2事件模型" tabindex="-1"><a class="header-anchor" href="#dom-level-2事件模型"><span>DOM Level 2事件模型</span></a></h3><p><strong>这是现代浏览器使用的事件模型，它提供了更灵活和强大的事件处理机制。在DOM Level 2事件模型中：</strong></p><ol><li><strong>事件监听</strong> <strong>：事件处理程序通过JavaScript的</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;addEventListener&lt;/span&gt;</code>方法添加到元素上，可以动态添加和移除。</li></ol><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">element</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;click&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 处理事件</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><ol start="2"><li><strong>事件对象</strong> <strong>：当事件被触发时，会创建一个事件对象，它包含了事件的所有信息，如事件类型、目标、时间戳等。这个对象作为参数传递给事件处理函数。</strong></li></ol><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> handleClick</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">event</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">type</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &quot;click&quot;</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">event</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 事件目标元素</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><ol start="3"><li><strong>事件传播</strong> <strong>：事件在DOM中传播的过程包括三个阶段：</strong></li></ol><ul><li><strong>捕获阶段</strong> <strong>（Capturing Phase）：事件从根节点（document对象）开始，向下传播到目标元素。</strong></li><li><strong>目标阶段</strong> <strong>（Target Phase）：事件到达目标元素。</strong></li><li><strong>冒泡阶段</strong> <strong>（Bubbling Phase）：事件从目标元素向上传播回根节点。</strong></li></ul><ol start="4"><li><strong>事件流</strong> <strong>：可以通过设置</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;addEventListener&lt;/span&gt;</code>的第三个参数来控制事件处理是在捕获阶段还是冒泡阶段触发。默认情况下（第三个参数为 <code>&lt;span class=&quot;ne-text&quot;&gt;false&lt;/span&gt;</code>），事件处理在冒泡阶段触发。如果设置为 <code>&lt;span class=&quot;ne-text&quot;&gt;true&lt;/span&gt;</code>，则在捕获阶段触发。</li><li><strong>事件取消</strong> <strong>：可以使用</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;event.preventDefault()&lt;/span&gt;</code>方法取消事件的默认行为，使用 <code>&lt;span class=&quot;ne-text&quot;&gt;event.stopPropagation()&lt;/span&gt;</code>方法阻止事件进一步传播。</li><li><strong>事件委托</strong> <strong>：由于事件冒泡的特性，可以在父元素上设置一个事件处理程序来管理所有子元素的同一类事件，这称为事件委托。这有助于减少内存消耗并简化代码。</strong></li></ol><p><strong>现代Web开发中，推荐使用DOM Level 2事件模型，因为它提供了更好的控制和更丰富的特性集。</strong></p><h3 id="事件对象" tabindex="-1"><a class="header-anchor" href="#事件对象"><span>事件对象</span></a></h3><p><strong>在DOM事件处理中，当一个事件发生时，浏览器会创建一个事件对象（通常表示为</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;event&lt;/span&gt;</code>），这个对象包含了关于事件的详细信息，以及一些可以调用的方法。事件对象作为参数自动传递给事件处理函数。</p><p><strong>事件对象包含以下常见的属性和方法：</strong></p><ul><li><code>&lt;span class=&quot;ne-text&quot;&gt;type&lt;/span&gt;</code>：事件的类型，例如 <code>&lt;span class=&quot;ne-text&quot;&gt;&quot;click&quot;&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;&quot;mouseover&quot;&lt;/span&gt;</code>等。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;target&lt;/span&gt;</code>：触发事件的元素，也就是事件绑定的元素。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;currentTarget&lt;/span&gt;</code>：事件处理程序当前正在被执行的元素，这在事件委托中特别有用。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;eventPhase&lt;/span&gt;</code>：当前事件处于的阶段（捕获阶段、目标阶段或冒泡阶段）。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;bubbles&lt;/span&gt;</code>：指示事件是否冒泡。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;cancelable&lt;/span&gt;</code>：指示事件是否可以被取消。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;timeStamp&lt;/span&gt;</code>：事件被创建时的时间戳。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;preventDefault()&lt;/span&gt;</code>：取消事件的默认行为。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;stopPropagation()&lt;/span&gt;</code>：停止事件进一步传播。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;stopImmediatePropagation()&lt;/span&gt;</code>：停止事件的进一步传播，并且阻止同一元素上其他同类型事件的执行。</li></ul><h3 id="事件委托" tabindex="-1"><a class="header-anchor" href="#事件委托"><span>事件委托</span></a></h3><p><strong>事件委托是一种技术，它利用了事件冒泡的原理。在这种技术中，事件监听器不是直接绑定在目标元素上，而是绑定在目标元素的父元素或祖先元素上。当子元素（目标元素）触发事件时，这个事件会冒泡到父元素，父元素上的事件处理程序就会执行。</strong></p><p><strong>事件委托的优点包括：</strong></p><ol><li><strong>减少内存消耗</strong> <strong>：因为只需要在父元素上设置一个事件处理程序，而不是在每个子元素上都设置。</strong></li><li><strong>动态元素管理</strong> <strong>：对于动态添加到DOM中的元素，不需要单独为它们添加事件处理程序，因为它们会继承父元素的事件处理程序。</strong></li><li><strong>简化代码</strong> <strong>：可以简化事件处理代码，特别是当有多个元素需要相同类型的事件处理时。</strong></li></ol><p><strong>事件委托的实现示例：</strong></p><div class="language-html" data-ext="html" data-title="html"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">div</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;parent&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">button</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;按钮1&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">button</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">button</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;按钮2&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">button</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  &lt;!-- 更多按钮 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> parentDiv</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementById</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;parent&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">parentDiv</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;click&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> target</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> event</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 事件实际触发的元素</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">tagName</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> ===</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;BUTTON&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;按钮被点击&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">textContent</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">});</span></span></code></pre></div><p><strong>在这个例子中，我们只在父元素</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;div&lt;/span&gt;</code>上设置了一个点击事件的监听器。当任何按钮被点击时，事件会冒泡到 <code>&lt;span class=&quot;ne-text&quot;&gt;div&lt;/span&gt;</code>，然后事件处理程序会检查事件的目标是否是按钮。如果是，就执行相应的操作。这样，即使后续添加了更多的按钮，也不需要为它们单独设置事件监听器。</p><hr></details><h2 id="事件三要素是什么" tabindex="-1"><a class="header-anchor" href="#事件三要素是什么"><span>事件三要素是什么？</span></a></h2><p><strong>事件类型（Event Type）</strong></p><p><strong>事件目标（Event Target）</strong></p><p><strong>事件处理器（Event Handler）</strong></p><details class="lake-collapse"><summary id="u78c7ab8f"><span class="ne-text">拓展</span></summary><p><strong>在DOM（文档对象模型）事件处理中，通常提到事件的三个基本要素，它们是：</strong></p><ol><li><strong>事件类型（Event Type）</strong> <strong>：</strong></li></ol><ul><li><strong>这是触发事件的具体动作，比如</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;click&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;mouseover&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;keydown&lt;/span&gt;</code>等。事件类型告诉你发生了什么类型的交互或动作。</li></ul><ol start="2"><li><strong>事件目标（Event Target）</strong> <strong>：</strong></li></ol><ul><li><strong>这是触发事件的DOM元素。例如，如果你点击了一个按钮，那么这个按钮元素就是事件的目标。</strong></li></ul><ol start="3"><li><strong>事件处理器（Event Handler）</strong> <strong>：</strong></li></ol><ul><li><strong>这是当事件发生时，要执行的函数或代码。事件处理器是你定义的逻辑，用于响应特定的事件。</strong></li></ul><h3 id="事件对象-event-object" tabindex="-1"><a class="header-anchor" href="#事件对象-event-object"><span>事件对象（Event Object）</span></a></h3><p><strong>除了上述三个要素，还有一个重要的组成部分是事件对象。当事件被触发时，浏览器会创建一个事件对象，该对象包含了事件的详细信息和一些方法，用于控制事件的传播和默认行为。</strong></p><ul><li><strong>事件对象（Event Object）</strong> <strong>：</strong></li><li><strong>这个对象作为参数自动传递给事件处理器函数。它提供了关于事件的详细信息，如事件的类型、目标、时间、是否可取消等。</strong></li><li><strong>事件对象的方法包括</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;preventDefault()&lt;/span&gt;</code>（取消事件的默认行为）、<code>&lt;span class=&quot;ne-text&quot;&gt;stopPropagation()&lt;/span&gt;</code>（停止事件的进一步传播）和 <code>&lt;span class=&quot;ne-text&quot;&gt;stopImmediatePropagation()&lt;/span&gt;</code>（停止事件的进一步传播，并阻止同一元素上其他同类型事件的执行）。</li></ul><h3 id="示例-4" tabindex="-1"><a class="header-anchor" href="#示例-4"><span>示例</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 获取一个DOM元素</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> button</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementById</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;myButton&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 定义一个事件处理器函数</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> handleClick</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;按钮被点击了&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;事件类型:&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">event</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">type</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 事件类型</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;事件目标:&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">event</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 事件目标</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 可以调用事件对象的方法来控制事件行为</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  event</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">preventDefault</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  event</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">stopPropagation</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 为按钮添加点击事件监听器</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">button</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;click&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">handleClick</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在这个示例中，当按钮被点击时，会触发</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;handleClick&lt;/span&gt;</code>事件处理器。这个处理器接收一个事件对象作为参数，从中可以访问事件的类型和目标，并且可以使用事件对象的方法来控制事件的行为。</p><hr></details><h2 id="获取元素位置" tabindex="-1"><a class="header-anchor" href="#获取元素位置"><span>获取元素位置？</span></a></h2><details class="lake-collapse"><summary id="ub21f9ef4"><span class="ne-text">拓展</span></summary><p><strong>在JavaScript中，获取元素的位置可以通过几种不同的方法，这些方法可以帮助你确定元素在页面上的确切位置，包括它距离页面左上角的距离，或者相对于其父元素的位置。以下是一些常用的方法：</strong></p><h3 id="_1-span-class-ne-text-offsetleft-span-和-span-class-ne-text-offsettop-span" tabindex="-1"><a class="header-anchor" href="#_1-span-class-ne-text-offsetleft-span-和-span-class-ne-text-offsettop-span"><span>1. <code>&lt;span class=&quot;ne-text&quot;&gt;offsetLeft&lt;/span&gt;</code> 和 <code>&lt;span class=&quot;ne-text&quot;&gt;offsetTop&lt;/span&gt;</code></span></a></h3><p><strong>这两个属性返回元素相对于其</strong> <strong>定位父元素</strong> <strong>（offset parent）的左（left）和顶（top）边的距离。</strong></p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> element</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementById</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;myElement&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> xPos</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> element</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">offsetLeft</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> yPos</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> element</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">offsetTop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><h3 id="_2-span-class-ne-text-getboundingclientrect-span" tabindex="-1"><a class="header-anchor" href="#_2-span-class-ne-text-getboundingclientrect-span"><span>2. <code>&lt;span class=&quot;ne-text&quot;&gt;getBoundingClientRect()&lt;/span&gt;</code></span></a></h3><p><strong>这个方法返回元素的大小以及其相对于视口的位置。它返回的是一个矩形对象，包含</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;top&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;right&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;bottom&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;left&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;width&lt;/span&gt;</code>和 <code>&lt;span class=&quot;ne-text&quot;&gt;height&lt;/span&gt;</code>属性。</p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> element</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementById</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;myElement&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> rect</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> element</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getBoundingClientRect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> top</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> rect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">top</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> right</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> rect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">right</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> bottom</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> rect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">bottom</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> left</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> rect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">left</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> width</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> rect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">width</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> height</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> rect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">height</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><h3 id="_3-span-class-ne-text-offsetparent-span" tabindex="-1"><a class="header-anchor" href="#_3-span-class-ne-text-offsetparent-span"><span>3. <code>&lt;span class=&quot;ne-text&quot;&gt;offsetParent&lt;/span&gt;</code></span></a></h3><p><strong>这个属性返回最近的含有定位（positioned）的父元素。如果所有父元素都没有定位，则返回最近的</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;&lt;table&gt;&lt;/span&gt;</code>或 <code>&lt;span class=&quot;ne-text&quot;&gt;&lt;td&gt;&lt;/span&gt;</code>元素，如果这些元素也不存在，则返回 <code>&lt;span class=&quot;ne-text&quot;&gt;&lt;body&gt;&lt;/span&gt;</code>元素。</p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> element</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementById</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;myElement&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> positionedParent</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> element</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">offsetParent</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><h3 id="_4-span-class-ne-text-clientleft-span-和-span-class-ne-text-clienttop-span" tabindex="-1"><a class="header-anchor" href="#_4-span-class-ne-text-clientleft-span-和-span-class-ne-text-clienttop-span"><span>4. <code>&lt;span class=&quot;ne-text&quot;&gt;clientLeft&lt;/span&gt;</code> 和 <code>&lt;span class=&quot;ne-text&quot;&gt;clientTop&lt;/span&gt;</code></span></a></h3><p><strong>这两个属性返回元素的边框宽度（border width），可以用来确定元素的内部尺寸。</strong></p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> element</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementById</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;myElement&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> borderLeft</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> element</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">clientLeft</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> borderTop</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> element</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">clientTop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><h3 id="_5-span-class-ne-text-scrollleft-span-和-span-class-ne-text-scrolltop-span" tabindex="-1"><a class="header-anchor" href="#_5-span-class-ne-text-scrollleft-span-和-span-class-ne-text-scrolltop-span"><span>5. <code>&lt;span class=&quot;ne-text&quot;&gt;scrollLeft&lt;/span&gt;</code> 和 <code>&lt;span class=&quot;ne-text&quot;&gt;scrollTop&lt;/span&gt;</code></span></a></h3><p><strong>如果你需要获取元素的滚动位置，可以使用这两个属性。</strong></p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> element</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementById</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;myElement&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> scrollLeft</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> element</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">scrollLeft</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> scrollTop</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> element</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">scrollTop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><h3 id="示例-获取元素相对于视口的位置" tabindex="-1"><a class="header-anchor" href="#示例-获取元素相对于视口的位置"><span>示例：获取元素相对于视口的位置</span></a></h3><p><strong>以下示例展示了如何获取元素相对于浏览器视口的位置：</strong></p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> element</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementById</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;myElement&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> rect</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> element</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getBoundingClientRect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> xPos</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> rect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">left</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> +</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> window</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">scrollX</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 添加水平滚动距离</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> yPos</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> rect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">top</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> +</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> window</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">scrollY</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 添加垂直滚动距离</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">\`Element is positioned at </span><span style="color:#C678DD;--shiki-dark:#C678DD;">\${</span><span style="color:#E06C75;--shiki-dark:#E06C75;">xPos</span><span style="color:#C678DD;--shiki-dark:#C678DD;">}</span><span style="color:#98C379;--shiki-dark:#98C379;"> on the X-axis and </span><span style="color:#C678DD;--shiki-dark:#C678DD;">\${</span><span style="color:#E06C75;--shiki-dark:#E06C75;">yPos</span><span style="color:#C678DD;--shiki-dark:#C678DD;">}</span><span style="color:#98C379;--shiki-dark:#98C379;"> on the Y-axis relative to the viewport.\`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><p><strong>这些方法可以帮助你确定元素在页面上的位置，无论是相对于其父元素还是相对于整个视口。这对于执行动态布局、拖放功能或任何需要精确位置信息的操作都非常有用。</strong></p><hr></details><h2 id="settimeout和setinterval的区别及用法是什么" tabindex="-1"><a class="header-anchor" href="#settimeout和setinterval的区别及用法是什么"><span>setTimeout和setInterval的区别及用法是什么？</span></a></h2><p><strong>setTimeout(function, delay, [arg1, arg2, ...]);</strong></p><p><strong>setInterval(function, interval, [arg1, arg2, ...]);</strong></p><p>** clearTimeout(timeoutId); // 停止setTimeout**</p><p>** clearInterval(intervalId);**</p><details class="lake-collapse"><summary id="u143db8b8"><span class="ne-text">拓展</span></summary><p><code>&lt;span class=&quot;ne-text&quot;&gt;setTimeout&lt;/span&gt;</code>和 <code>&lt;span class=&quot;ne-text&quot;&gt;setInterval&lt;/span&gt;</code>是JavaScript中用于定时执行代码的两个函数，它们都属于Window对象，也可用于Worker。尽管它们的目的相似，但用法和行为有所不同。</p><h3 id="settimeout" tabindex="-1"><a class="header-anchor" href="#settimeout"><span>setTimeout</span></a></h3><p><code>&lt;span class=&quot;ne-text&quot;&gt;setTimeout&lt;/span&gt;</code>用于在指定的毫秒数后执行一次代码。</p><p><strong>用法</strong>:</p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">delay</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, [</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">arg1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">arg2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, ...]);</span></span></code></pre></div><ul><li><code>&lt;span class=&quot;ne-text&quot;&gt;function&lt;/span&gt;</code>: 要执行的函数。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;delay&lt;/span&gt;</code>: 延迟时间，单位为毫秒。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;arg1, arg2, ...&lt;/span&gt;</code>: 可选参数，传递给函数的参数。</li></ul><p><strong>示例</strong>:</p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> sayHello</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Hello after 3 seconds&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">sayHello</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">3000</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 3秒后执行sayHello函数</span></span></code></pre></div><h3 id="setinterval" tabindex="-1"><a class="header-anchor" href="#setinterval"><span>setInterval</span></a></h3><p><code>&lt;span class=&quot;ne-text&quot;&gt;setInterval&lt;/span&gt;</code>用于按照指定的时间间隔周期性地执行代码。</p><p><strong>用法</strong>:</p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">setInterval</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">interval</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, [</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">arg1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">arg2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, ...]);</span></span></code></pre></div><ul><li><code>&lt;span class=&quot;ne-text&quot;&gt;function&lt;/span&gt;</code>: 要执行的函数。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;interval&lt;/span&gt;</code>: 每次执行的间隔时间，单位为毫秒。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;arg1, arg2, ...&lt;/span&gt;</code>: 可选参数，传递给函数的参数。</li></ul><p><strong>示例</strong>:</p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> repeatHello</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Hello every 2 seconds&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> intervalId</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> setInterval</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">repeatHello</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2000</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 每2秒执行一次repeatHello函数</span></span></code></pre></div><h3 id="区别-3" tabindex="-1"><a class="header-anchor" href="#区别-3"><span>区别</span></a></h3><ol><li><strong>执行次数</strong>：<code>&lt;span class=&quot;ne-text&quot;&gt;setTimeout&lt;/span&gt;</code>执行一次后停止，而 <code>&lt;span class=&quot;ne-text&quot;&gt;setInterval&lt;/span&gt;</code>会不断重复执行，直到你明确地停止它（使用 <code>&lt;span class=&quot;ne-text&quot;&gt;clearInterval&lt;/span&gt;</code>）。</li><li><strong>延迟与间隔</strong>：<code>&lt;span class=&quot;ne-text&quot;&gt;setTimeout&lt;/span&gt;</code>的延迟是指从调用 <code>&lt;span class=&quot;ne-text&quot;&gt;setTimeout&lt;/span&gt;</code>到函数执行之间的时间。<code>&lt;span class=&quot;ne-text&quot;&gt;setInterval&lt;/span&gt;</code>的间隔是指函数执行之间的时间。</li><li><strong>停止执行</strong>：<code>&lt;span class=&quot;ne-text&quot;&gt;setTimeout&lt;/span&gt;</code>不需要手动停止，因为执行一次后自然结束。<code>&lt;span class=&quot;ne-text&quot;&gt;setInterval&lt;/span&gt;</code>需要使用 <code>&lt;span class=&quot;ne-text&quot;&gt;clearInterval&lt;/span&gt;</code>来停止。</li></ol><h3 id="停止定时器" tabindex="-1"><a class="header-anchor" href="#停止定时器"><span>停止定时器</span></a></h3><ul><li><code>&lt;span class=&quot;ne-text&quot;&gt;clearTimeout&lt;/span&gt;</code>用于停止 <code>&lt;span class=&quot;ne-text&quot;&gt;setTimeout&lt;/span&gt;</code>。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;clearInterval&lt;/span&gt;</code>用于停止 <code>&lt;span class=&quot;ne-text&quot;&gt;setInterval&lt;/span&gt;</code>。</li></ul><p><strong>示例</strong>:</p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> timeoutId</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> setTimeout</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;This will not run&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">5000</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">clearTimeout</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">timeoutId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 停止setTimeout</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> intervalId</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> setInterval</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;This will run until it is cleared&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">1000</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 运行一段时间后停止</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  clearInterval</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">intervalId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">10000</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h3><ul><li><strong>当使用</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;setInterval&lt;/span&gt;</code>时，如果执行的函数耗时较长，可能会导致执行重叠，即上一次执行还没完成，下一次又开始了。为了避免这种情况，可以使用 <code>&lt;span class=&quot;ne-text&quot;&gt;setTimeout&lt;/span&gt;</code>递归调用自身。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;setTimeout&lt;/span&gt;</code>和 <code>&lt;span class=&quot;ne-text&quot;&gt;setInterval&lt;/span&gt;</code>的精确度受到JavaScript单线程模型的限制，如果主线程被其他任务阻塞，定时器可能会延迟执行。</li><li></li></ul><hr></details><h2 id="settimeout来实现setinterval" tabindex="-1"><a class="header-anchor" href="#settimeout来实现setinterval"><span>setTimeout来实现setInterval</span></a></h2><details class="lake-collapse"><summary id="u30317d9e"></summary><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> timeWorker</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> mySetInterval</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">fn</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">time</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 定义一个key，来标识此定时器</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> key</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Symbol</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 定义一个递归函数，持续调用定时器</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  var</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> execute</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">fn</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">time</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">     timeWorker</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E06C75;--shiki-dark:#E06C75;">key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> setTimeout</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        fn</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        execute</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">fn</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">time</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">     }, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">time</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">   }</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  execute</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">fn</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">time</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 返回key</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  return</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> myClearInterval</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E06C75;--shiki-dark:#E06C75;">key</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> in</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> timeWorker</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">   clearTimeout</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">timeWorker</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E06C75;--shiki-dark:#E06C75;">key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    delete</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> timeWorker</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E06C75;--shiki-dark:#E06C75;">key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>拓展</strong>这段代码定义了两个函数：<code>&lt;span class=&quot;ne-text&quot;&gt;mySetInterval&lt;/span&gt;</code> 和 <code>&lt;span class=&quot;ne-text&quot;&gt;myClearInterval&lt;/span&gt;</code>，它们模拟了 <code>&lt;span class=&quot;ne-text&quot;&gt;setInterval&lt;/span&gt;</code> 和 <code>&lt;span class=&quot;ne-text&quot;&gt;clearInterval&lt;/span&gt;</code> 的行为，但是使用了 <code>&lt;span class=&quot;ne-text&quot;&gt;setTimeout&lt;/span&gt;</code> 来实现。这种方法可以避免 <code>&lt;span class=&quot;ne-text&quot;&gt;setInterval&lt;/span&gt;</code> 可能带来的一些问题，比如函数执行时间的不确定性和最小时间间隔的限制。</p><h3 id="mysetinterval-函数" tabindex="-1"><a class="header-anchor" href="#mysetinterval-函数"><span>mySetInterval 函数</span></a></h3><p><strong>这个函数接收两个参数：</strong></p><ul><li><code>&lt;span class=&quot;ne-text&quot;&gt;fn&lt;/span&gt;</code>：要重复执行的函数。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;time&lt;/span&gt;</code>：执行间隔时间，单位为毫秒。</li></ul><p><strong>函数内部：</strong></p><ol><li>**定义了一个 **<code>&lt;span class=&quot;ne-text&quot;&gt;key&lt;/span&gt;</code>，使用 <code>&lt;span class=&quot;ne-text&quot;&gt;Symbol&lt;/span&gt;</code> 来确保唯一性，这样可以在 <code>&lt;span class=&quot;ne-text&quot;&gt;timeWorker&lt;/span&gt;</code> 对象中唯一标识每个定时器。</li><li>**定义了一个 **<code>&lt;span class=&quot;ne-text&quot;&gt;execute&lt;/span&gt;</code> 函数，它使用 <code>&lt;span class=&quot;ne-text&quot;&gt;setTimeout&lt;/span&gt;</code> 来实现定时调用 <code>&lt;span class=&quot;ne-text&quot;&gt;fn&lt;/span&gt;</code> 函数。每次 <code>&lt;span class=&quot;ne-text&quot;&gt;fn&lt;/span&gt;</code> 执行后，<code>&lt;span class=&quot;ne-text&quot;&gt;execute&lt;/span&gt;</code> 函数会再次调用自己，形成一个递归循环。</li><li>**调用 **<code>&lt;span class=&quot;ne-text&quot;&gt;execute&lt;/span&gt;</code> 函数开始执行定时任务。</li><li>**返回 **<code>&lt;span class=&quot;ne-text&quot;&gt;key&lt;/span&gt;</code>，这个 <code>&lt;span class=&quot;ne-text&quot;&gt;key&lt;/span&gt;</code> 可以用于以后取消定时任务。</li></ol><h3 id="myclearinterval-函数" tabindex="-1"><a class="header-anchor" href="#myclearinterval-函数"><span>myClearInterval 函数</span></a></h3><p>**这个函数用于取消由 **<code>&lt;span class=&quot;ne-text&quot;&gt;mySetInterval&lt;/span&gt;</code> 设置的定时任务。</p><ul><li>**它接收一个 **<code>&lt;span class=&quot;ne-text&quot;&gt;key&lt;/span&gt;</code> 参数，这个 <code>&lt;span class=&quot;ne-text&quot;&gt;key&lt;/span&gt;</code> 是 <code>&lt;span class=&quot;ne-text&quot;&gt;mySetInterval&lt;/span&gt;</code> 返回的。</li><li>**如果 **<code>&lt;span class=&quot;ne-text&quot;&gt;timeWorker&lt;/span&gt;</code> 对象中存在这个 <code>&lt;span class=&quot;ne-text&quot;&gt;key&lt;/span&gt;</code>，则使用 <code>&lt;span class=&quot;ne-text&quot;&gt;clearTimeout&lt;/span&gt;</code> 来取消对应的定时器，然后从 <code>&lt;span class=&quot;ne-text&quot;&gt;timeWorker&lt;/span&gt;</code> 对象中删除这个 <code>&lt;span class=&quot;ne-text&quot;&gt;key&lt;/span&gt;</code>。</li></ul><h3 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例"><span>使用示例</span></a></h3><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> myIntervalKey</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> mySetInterval</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;这条消息会每2秒打印一次&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2000</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 当你想停止定时任务时</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">myClearInterval</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">myIntervalKey</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><h3 id="注意事项-1" tabindex="-1"><a class="header-anchor" href="#注意事项-1"><span>注意事项</span></a></h3><ul><li>**确保在不需要定时任务时调用 **<code>&lt;span class=&quot;ne-text&quot;&gt;myClearInterval&lt;/span&gt;</code> 来清除定时器，避免内存泄漏。</li><li>**由于使用了 **<code>&lt;span class=&quot;ne-text&quot;&gt;Symbol&lt;/span&gt;</code> 作为 <code>&lt;span class=&quot;ne-text&quot;&gt;key&lt;/span&gt;</code>，所以每个定时器都是唯一的，即使在多个 <code>&lt;span class=&quot;ne-text&quot;&gt;mySetInterval&lt;/span&gt;</code> 调用之间也不会冲突。</li><li>**这种方法比直接使用 **<code>&lt;span class=&quot;ne-text&quot;&gt;setInterval&lt;/span&gt;</code> 更灵活，因为它允许你在每次迭代后根据需要调整间隔时间或停止定时器。</li><li></li></ul><hr></details><h2 id="document-write和innerhtml的区别" tabindex="-1"><a class="header-anchor" href="#document-write和innerhtml的区别"><span>document.write和innerHTML的区别？</span></a></h2><p><code>&lt;span class=&quot;ne-text&quot;&gt;document.write&lt;/span&gt;</code> 主要用于在文档加载时写入内容，</p><p>**而 **<code>&lt;span class=&quot;ne-text&quot;&gt;innerHTML&lt;/span&gt;</code> 用于在文档加载完成后修改元素的内容。</p><details class="lake-collapse"><summary id="u2d3085e5"><span class="ne-text">拓展</span></summary><p><code>&lt;span class=&quot;ne-text&quot;&gt;document.write&lt;/span&gt;</code> 和 <code>&lt;span class=&quot;ne-text&quot;&gt;innerHTML&lt;/span&gt;</code> 都是用来操作HTML文档内容的方法，但它们在用法和用途上有一些区别：</p><h3 id="document-write" tabindex="-1"><a class="header-anchor" href="#document-write"><span>document.write</span></a></h3><ul><li><code>&lt;span class=&quot;ne-text&quot;&gt;document.write&lt;/span&gt;</code> 是一个只读属性，它返回当前文档的内容，如果尝试读取它的值，会返回空字符串。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;document.write&lt;/span&gt;</code> 方法可以用来向文档中写入字符串参数。当调用这个方法时，它会将字符串参数写入文档的输出流中。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;document.write&lt;/span&gt;</code> 只能用于在加载文档的过程中写入内容，一旦文档加载完成（即 <code>&lt;span class=&quot;ne-text&quot;&gt;DOMContentLoaded&lt;/span&gt;</code> 事件之后），再使用 <code>&lt;span class=&quot;ne-text&quot;&gt;document.write&lt;/span&gt;</code> 会清空整个文档的内容。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;document.write&lt;/span&gt;</code> 通常在服务器生成HTML或在文档加载时由JavaScript动态生成内容时使用。</li></ul><h3 id="innerhtml" tabindex="-1"><a class="header-anchor" href="#innerhtml"><span>innerHTML</span></a></h3><ul><li><code>&lt;span class=&quot;ne-text&quot;&gt;innerHTML&lt;/span&gt;</code> 是一个属性，它返回指定元素内的HTML内容。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;innerHTML&lt;/span&gt;</code> 可以用来读取或设置元素内的HTML内容。当你设置一个元素的 <code>&lt;span class=&quot;ne-text&quot;&gt;innerHTML&lt;/span&gt;</code> 属性时，它会替换该元素内部的所有内容（包括子元素）。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;innerHTML&lt;/span&gt;</code> 可以在任何时候使用，即使在文档加载完成后也可以安全地使用，不会导致整个文档内容被清空。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;innerHTML&lt;/span&gt;</code> 常用于动态更新页面的部分内容，比如通过JavaScript操作DOM来更改或添加新的元素和文本。</li></ul><h3 id="区别-4" tabindex="-1"><a class="header-anchor" href="#区别-4"><span>区别</span></a></h3><ol><li><strong>用途</strong> <strong>：</strong><code>&lt;span class=&quot;ne-text&quot;&gt;document.write&lt;/span&gt;</code> 主要用于在文档加载时写入内容，而 <code>&lt;span class=&quot;ne-text&quot;&gt;innerHTML&lt;/span&gt;</code> 用于在文档加载完成后修改元素的内容。</li><li><strong>安全性</strong> <strong>：</strong><code>&lt;span class=&quot;ne-text&quot;&gt;innerHTML&lt;/span&gt;</code> 可以导致跨站脚本（XSS）攻击，因为它允许执行HTML和JavaScript。在使用 <code>&lt;span class=&quot;ne-text&quot;&gt;innerHTML&lt;/span&gt;</code> 时，需要确保内容是安全的，不包含用户输入的恶意代码。<code>&lt;span class=&quot;ne-text&quot;&gt;document.write&lt;/span&gt;</code> 也有类似的安全风险。</li><li><strong>灵活性</strong> <strong>：</strong><code>&lt;span class=&quot;ne-text&quot;&gt;innerHTML&lt;/span&gt;</code> 更灵活，因为它可以用于单个元素，而 <code>&lt;span class=&quot;ne-text&quot;&gt;document.write&lt;/span&gt;</code> 影响整个文档。</li><li><strong>性能</strong> **：频繁使用 **<code>&lt;span class=&quot;ne-text&quot;&gt;innerHTML&lt;/span&gt;</code> 可能会导致性能问题，因为它涉及到DOM的重绘和重排。<code>&lt;span class=&quot;ne-text&quot;&gt;document.write&lt;/span&gt;</code> 在文档加载时使用，不涉及重绘和重排的问题。</li></ol><h3 id="示例-5" tabindex="-1"><a class="header-anchor" href="#示例-5"><span>示例</span></a></h3><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用 document.write</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">write</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;&lt;p&gt;Hello World&lt;/p&gt;&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用 innerHTML</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> element</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementById</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;myElement&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">element</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">innerHTML</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;&lt;strong&gt;Bold Text&lt;/strong&gt;&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><p>**在实际开发中，推荐使用 **<code>&lt;span class=&quot;ne-text&quot;&gt;innerHTML&lt;/span&gt;</code> 来动态更新页面内容，因为它提供了更好的控制和灵活性。同时，要注意防范XSS攻击，确保处理的内容是安全的。</p></details><h2 id="元素拖动如何实现-原理是怎样" tabindex="-1"><a class="header-anchor" href="#元素拖动如何实现-原理是怎样"><span>元素拖动如何实现，原理是怎样？</span></a></h2><p><strong>原生</strong></p><ol><li><strong>mousedown</strong> <strong>：当鼠标按下时，记录当前鼠标位置和元素的初始位置。</strong></li><li><strong>mousemove</strong> <strong>：当鼠标移动时，计算鼠标的新位置，并相应地移动元素。</strong></li><li><strong>mouseup</strong> <strong>：当鼠标释放时，停止移动元素。</strong></li></ol><p><strong>使用HTML5拖放API</strong></p><ol><li><strong>draggable属性</strong> <strong>：给元素添加</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;draggable=&quot;true&quot;&lt;/span&gt;</code>属性，使其可拖动。</li><li><strong>拖动事件</strong> <strong>：监听</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;dragstart&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;dragover&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;dragend&lt;/span&gt;</code>等事件来控制拖动过程。</li></ol><details class="lake-collapse"><summary id="u79694720"><span class="ne-text">拓展</span></summary><p><strong>元素拖动是Web开发中常见的交互功能，可以通过原生JavaScript或HTML5的拖放API来实现。以下是两种方法的实现方式和原理：</strong></p><h3 id="使用原生javascript" tabindex="-1"><a class="header-anchor" href="#使用原生javascript"><span>使用原生JavaScript</span></a></h3><p><strong>原生JavaScript实现元素拖动的原理是监听鼠标事件，通过计算鼠标移动的距离来更新元素的位置。</strong></p><ol><li><strong>mousedown</strong> <strong>：当鼠标按下时，记录当前鼠标位置和元素的初始位置。</strong></li><li><strong>mousemove</strong> <strong>：当鼠标移动时，计算鼠标的新位置，并相应地移动元素。</strong></li><li><strong>mouseup</strong> <strong>：当鼠标释放时，停止移动元素。</strong></li></ol><h4 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码"><span>示例代码</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> dragElement</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementById</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;draggable&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> offsetX</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">offsetY</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">dragX</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">dragY</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">dragElement</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">onmousedown</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 获取鼠标点击时的屏幕坐标</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  offsetX</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">clientX</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> -</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> dragX</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  offsetY</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">clientY</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> -</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> dragY</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 绑定移动和松开事件</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">onmousemove</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> dragMove</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">onmouseup</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> stopDragging</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> dragMove</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 计算元素新的位置</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  dragX</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">clientX</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> -</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> offsetX</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  dragY</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">clientY</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> -</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> offsetY</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 设置元素的新位置</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  dragElement</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">left</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> dragX</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> +</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;px&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  dragElement</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">top</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> dragY</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> +</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;px&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> stopDragging</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 解除鼠标移动和松开事件</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">onmouseup</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> null</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">onmousemove</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> null</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用html5拖放api" tabindex="-1"><a class="header-anchor" href="#使用html5拖放api"><span>使用HTML5拖放API</span></a></h3><p><strong>HTML5提供了一套拖放API，可以更方便地实现拖动功能。</strong></p><ol><li><strong>draggable属性</strong> <strong>：给元素添加</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;draggable=&quot;true&quot;&lt;/span&gt;</code>属性，使其可拖动。</li><li><strong>拖动事件</strong> <strong>：监听</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;dragstart&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;dragover&lt;/span&gt;</code>、<code>&lt;span class=&quot;ne-text&quot;&gt;dragend&lt;/span&gt;</code>等事件来控制拖动过程。</li></ol><h4 id="示例代码-1" tabindex="-1"><a class="header-anchor" href="#示例代码-1"><span>示例代码</span></a></h4><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">div</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;draggable&quot;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> draggable</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;true&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;可拖动的元素&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">div</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;dropzone&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;放置区域&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">script</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> dragItem</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementById</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;draggable&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> dropZone</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementById</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;dropzone&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">dragItem</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;dragstart&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 拖动开始时的事件处理</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">dropZone</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;dragover&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 阻止默认行为以启用drop</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">preventDefault</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">dropZone</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;drop&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 拖动结束并放置时的事件处理</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> data</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">dataTransfer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getData</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 将拖动的元素移动到放置区域</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  dropZone</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">appendChild</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">dragItem</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">script</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h3><ul><li><strong>鼠标事件</strong> <strong>：通过监听鼠标事件来控制元素的移动。</strong></li><li><strong>事件委托</strong> <strong>：在</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;document&lt;/span&gt;</code>上监听事件，而不是直接在元素上，这样可以处理从元素外部移动到元素内部的情况。</li><li><strong>坐标计算</strong> <strong>：计算鼠标移动的距离，并更新元素的位置。</strong></li><li><strong>CSS定位</strong> <strong>：通常使用CSS的</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;position&lt;/span&gt;</code>属性（如 <code>&lt;span class=&quot;ne-text&quot;&gt;absolute&lt;/span&gt;</code>或 <code>&lt;span class=&quot;ne-text&quot;&gt;fixed&lt;/span&gt;</code>）来使元素脱离文档流，从而可以自由移动。</li></ul><p><strong>在实际应用中，可以根据具体需求选择使用原生JavaScript或HTML5拖放API来实现元素拖动。HTML5拖放API提供了更丰富的功能和更好的浏览器兼容性，但可能需要处理更多的事件和细节。原生JavaScript方法则更灵活，可以自定义更多的行为和样式。</strong></p><hr></details><h2 id="图片懒加载和预加载实现" tabindex="-1"><a class="header-anchor" href="#图片懒加载和预加载实现"><span>图片<strong>懒加载和预加载实现</strong></span></a></h2><p><strong>页面加载就像吃饭，懒加载就是吃多少盛多少，预加载就是把饭先盛好等你吃</strong></p><p><strong>懒加载和预加载实现</strong></p><p><strong>lazy preload</strong><br><a href="https://blog.csdn.net/weixin_49078296/article/details/140249963" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/weixin_49078296/article/details/140249963</a></p><p><a href="https://blog.csdn.net/qq_44741577/article/details/139324747" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/qq_44741577/article/details/139324747</a></p><details class="lake-collapse"><summary id="u1e232f1a"><span class="ne-text">拓展</span></summary><p><strong>图片的懒加载（Lazy Loading）和预加载（Preloading）是两种优化网页性能的技术，它们分别用于减少初始页面加载时间并提高用户体验。</strong></p><h3 id="图片懒加载" tabindex="-1"><a class="header-anchor" href="#图片懒加载"><span>图片懒加载</span></a></h3><p><strong>懒加载是一种延迟加载网页中非关键资源的技术。对于图片而言，懒加载意味着图片只有在接近滚动到视窗（viewport）时才开始加载。</strong></p><p><strong>优点</strong> <strong>：</strong></p><ol><li><strong>减少初始页面加载时间</strong> <strong>：页面加载时不需要加载所有图片，从而减少了HTTP请求和数据传输量。</strong></li><li><strong>节省带宽</strong> <strong>：用户可能只浏览页面的一部分，懒加载可以确保未浏览到的图片不会被加载。</strong></li><li><strong>提高性能</strong> <strong>：对于图片较多的页面，懒加载可以显著提高页面的响应速度和性能。</strong></li></ol><p><strong>实现方式</strong> <strong>：</strong></p><ul><li><strong>原生JavaScript</strong> <strong>：通过监听滚动事件和计算元素的位置来实现。</strong></li><li>**HTML5 <strong><code>&lt;span class=&quot;ne-text&quot;&gt;loading&lt;/span&gt;</code> ** 属性</strong> <strong>：</strong><code>&lt;span class=&quot;ne-text&quot;&gt;&lt;img loading=&quot;lazy&quot;&gt;&lt;/span&gt;</code>，现代浏览器支持这个属性，可以自动实现图片懒加载。</li><li><strong>Intersection Observer API</strong> <strong>：这是一个更现代和更高效的方法，用于异步检测目标元素与祖先元素或顶级文档视窗(</strong><code>&lt;span class=&quot;ne-text&quot;&gt;viewport&lt;/span&gt;</code>)的交叉状态。</li></ul><h3 id="图片预加载" tabindex="-1"><a class="header-anchor" href="#图片预加载"><span>图片预加载</span></a></h3><p><strong>预加载是一种在页面加载时就提前加载资源的技术。对于图片而言，预加载意味着在用户浏览到图片之前，图片已经被加载到浏览器缓存中。</strong></p><p><strong>优点</strong> <strong>：</strong></p><ol><li><strong>提高用户体验</strong> <strong>：用户滚动到图片位置时，图片已经加载完成，无需等待加载。</strong></li><li><strong>减少加载时间</strong> <strong>：通过提前加载图片，可以减少用户实际看到图片时的加载时间。</strong></li></ol><p><strong>实现方式</strong> <strong>：</strong></p><ul><li><code>&lt;span class=&quot;ne-text&quot;&gt;preload&lt;/span&gt;</code> ** 关键字** <strong>：在CSS中使用</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;preload&lt;/span&gt;</code>关键字预加载关键图片。</li></ul><div class="language-css" data-ext="css" data-title="css"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">link</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> rel=&quot;preload&quot; href=&quot;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">image</span><span style="color:#C678DD;--shiki-dark:#C678DD;">.jpg&quot; as=&quot;image&quot;</span></span></code></pre></div><ul><li><strong>JavaScript</strong> <strong>：使用JavaScript动态创建图片元素并设置其</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;src&lt;/span&gt;</code>属性来预加载图片。</li></ul><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> preloadImage</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">url</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> img</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Image</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  img</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">src</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> url</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">preloadImage</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;important-image.jpg&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><ul><li><strong>CSS Sprites</strong> <strong>：将多个小图标合并到一个图片文件中，然后通过CSS背景位置来显示不同的图标，这样可以减少HTTP请求。</strong></li></ul><h3 id="选择懒加载还是预加载" tabindex="-1"><a class="header-anchor" href="#选择懒加载还是预加载"><span>选择懒加载还是预加载？</span></a></h3><ul><li><strong>懒加载</strong> <strong>：适用于图片数量众多且不是所有图片都会立即需要的场景，特别是在长页面滚动或无限滚动的网页中。</strong></li><li><strong>预加载</strong> <strong>：适用于关键路径上的资源，比如首屏显示的图片或对用户体验至关重要的资源。</strong></li></ul><p><strong>在实际应用中，可以根据页面的具体需求和用户行为来决定使用懒加载、预加载或两者结合使用。例如，对于首屏内容可以采用预加载，而对于页面下方的内容则可以使用懒加载。</strong></p><hr></details><h2 id="mouseover和mouseenter的区别" tabindex="-1"><a class="header-anchor" href="#mouseover和mouseenter的区别"><span>mouseover和mouseenter的区别</span></a></h2><p><strong>mouseover:只要鼠标指计移入事件所绑定的元素或其子元素，都会触发该事件</strong></p><p><strong>mouseenter:只有鼠标指引事件所绑定的元素时，才会触发该事件</strong></p><p><strong>就是mouseover存在冒泡，mouseenter不存在</strong></p><details class="lake-collapse"><summary id="uf2ae8be3"><span class="ne-text">拓展</span></summary><p><code>&lt;span class=&quot;ne-text&quot;&gt;mouseover&lt;/span&gt;</code> 和 <code>&lt;span class=&quot;ne-text&quot;&gt;mouseenter&lt;/span&gt;</code> 都是鼠标事件，但它们在触发行为和事件传播上有所不同。</p><h3 id="mouseover" tabindex="-1"><a class="header-anchor" href="#mouseover"><span>mouseover</span></a></h3><ul><li><strong>当鼠标指针移动到元素上时触发。</strong></li><li>**如果鼠标指针移动到其子元素上，也会触发父元素上的 **<code>&lt;span class=&quot;ne-text&quot;&gt;mouseover&lt;/span&gt;</code> 事件。</li><li><strong>事件会冒泡，意味着如果鼠标指针移动到一个元素的子元素上，父元素也会接收到事件。</strong></li></ul><h3 id="mouseenter" tabindex="-1"><a class="header-anchor" href="#mouseenter"><span>mouseenter</span></a></h3><ul><li>**当鼠标指针移动到元素上时触发，与 **<code>&lt;span class=&quot;ne-text&quot;&gt;mouseover&lt;/span&gt;</code> 类似。</li><li>**不同之处在于，当鼠标指针移动到其子元素上时，不会再次触发父元素上的 **<code>&lt;span class=&quot;ne-text&quot;&gt;mouseenter&lt;/span&gt;</code> 事件。</li><li>**事件不会冒泡，父元素不会因子元素上的鼠标指针移动而触发 **<code>&lt;span class=&quot;ne-text&quot;&gt;mouseenter&lt;/span&gt;</code> 事件。</li></ul><h3 id="区别总结" tabindex="-1"><a class="header-anchor" href="#区别总结"><span>区别总结</span></a></h3><ul><li><strong>事件传播</strong> <strong>：</strong><code>&lt;span class=&quot;ne-text&quot;&gt;mouseover&lt;/span&gt;</code> 会冒泡，而 <code>&lt;span class=&quot;ne-text&quot;&gt;mouseenter&lt;/span&gt;</code> 不会。</li><li><strong>子元素交互</strong> <strong>：当鼠标指针移动到子元素上时，</strong><code>&lt;span class=&quot;ne-text&quot;&gt;mouseover&lt;/span&gt;</code> 会在所有包含的元素上触发，而 <code>&lt;span class=&quot;ne-text&quot;&gt;mouseenter&lt;/span&gt;</code> 只在最初进入的元素上触发一次。</li></ul><h3 id="示例-6" tabindex="-1"><a class="header-anchor" href="#示例-6"><span>示例</span></a></h3><div class="language-html" data-ext="html" data-title="html"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">div</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;parent&quot;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> onmouseenter</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#98C379;--shiki-dark:#98C379;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#98C379;--shiki-dark:#98C379;">(&#39;parent mouseenter&#39;)&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">div</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;child&quot;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> onmouseenter</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">console</span><span style="color:#98C379;--shiki-dark:#98C379;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#98C379;--shiki-dark:#98C379;">(&#39;child mouseenter&#39;)&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    Hover over me!</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><p><strong>在这个例子中，当你将鼠标指针移动到子元素上时：</strong></p><ul><li>**使用 **<code>&lt;span class=&quot;ne-text&quot;&gt;mouseenter&lt;/span&gt;</code>，只会打印 &quot;parent mouseenter&quot; 一次，即使鼠标指针在子元素上移动，也不会再次触发父元素上的 <code>&lt;span class=&quot;ne-text&quot;&gt;mouseenter&lt;/span&gt;</code> 事件。</li><li>**如果将 **<code>&lt;span class=&quot;ne-text&quot;&gt;mouseenter&lt;/span&gt;</code> 改为 <code>&lt;span class=&quot;ne-text&quot;&gt;mouseover&lt;/span&gt;</code>，则每次鼠标指针移动到子元素的不同位置时，都会触发父元素上的 <code>&lt;span class=&quot;ne-text&quot;&gt;mouseover&lt;/span&gt;</code> 事件，因为 <code>&lt;span class=&quot;ne-text&quot;&gt;mouseover&lt;/span&gt;</code> 会冒泡。</li></ul><p>**选择使用 **<code>&lt;span class=&quot;ne-text&quot;&gt;mouseover&lt;/span&gt;</code> 还是 <code>&lt;span class=&quot;ne-text&quot;&gt;mouseenter&lt;/span&gt;</code> 取决于你是否需要处理事件冒泡以及对子元素的交互是否敏感。</p><hr></details><h2 id="new操作符做了哪些事情" tabindex="-1"><a class="header-anchor" href="#new操作符做了哪些事情"><span>new操作符做了哪些事情</span></a></h2><p><strong>创建一个新对象</strong></p><p>** 新对象原型指向构造函数原型对象**</p><p>** 将构造函数的this指向新对象**</p><p><strong>根据返回值判断</strong></p><details class="lake-collapse"><summary id="u020493ac"><span class="ne-text">拓展</span></summary><p>**这段代码是一个自定义的构造函数 **<code>&lt;span class=&quot;ne-text&quot;&gt;mynew&lt;/span&gt;</code>，它模拟了 JavaScript 中 <code>&lt;span class=&quot;ne-text&quot;&gt;new&lt;/span&gt;</code> 操作符的行为。下面是对代码的逐行解释：</p><ol><li>**创建一个新对象 **<code>&lt;span class=&quot;ne-text&quot;&gt;obj&lt;/span&gt;</code>，这个对象将作为构造函数的实例。</li><li>**将新对象的原型指向构造函数 **<code>&lt;span class=&quot;ne-text&quot;&gt;Func&lt;/span&gt;</code> 的原型对象，这样新对象就可以继承构造函数的原型上的属性和方法。</li><li>**使用 **<code>&lt;span class=&quot;ne-text&quot;&gt;Func.apply(obj, args)&lt;/span&gt;</code> 调用构造函数，并将 <code>&lt;span class=&quot;ne-text&quot;&gt;this&lt;/span&gt;</code> 指向新对象 <code>&lt;span class=&quot;ne-text&quot;&gt;obj&lt;/span&gt;</code>，同时传入构造函数所需的参数 <code>&lt;span class=&quot;ne-text&quot;&gt;args&lt;/span&gt;</code>。这里有一个语法错误，应该是 <code>&lt;span class=&quot;ne-text&quot;&gt;Func.apply(obj, args)&lt;/span&gt;</code> 而不是 <code>&lt;span class=&quot;ne-text&quot;&gt;let result Func.apply(obj,args)&lt;/span&gt;</code>。</li><li>**判断构造函数的返回值。如果返回值是一个对象，则返回该对象；否则，返回新创建的对象 **<code>&lt;span class=&quot;ne-text&quot;&gt;obj&lt;/span&gt;</code>。</li></ol><p><strong>修正后的代码如下：</strong></p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> mynew</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Func</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, ...</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 1. 创建一个新对象</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> obj</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 2. 新对象原型指向构造函数原型对象</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">__proto__</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Func</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">prototype</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 3. 将构造函数的this指向新对象</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> result</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Func</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">apply</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 4. 根据返回值判断</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  return</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> result</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> instanceof</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Object</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> ?</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> result</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> :</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p><strong>这样，</strong><code>&lt;span class=&quot;ne-text&quot;&gt;mynew&lt;/span&gt;</code> 函数就可以像 <code>&lt;span class=&quot;ne-text&quot;&gt;new&lt;/span&gt;</code> 操作符一样使用了。例如：</p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Person</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">prototype</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">sayHello</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">\`Hello, my name is </span><span style="color:#C678DD;--shiki-dark:#C678DD;">\${</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#C678DD;--shiki-dark:#C678DD;">}</span><span style="color:#98C379;--shiki-dark:#98C379;">.\`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> person</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> mynew</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">Person</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Kimi&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">person</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">sayHello</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出: Hello, my name is Kimi.</span></span></code></pre></div><p>**请注意，虽然这个自定义的 **<code>&lt;span class=&quot;ne-text&quot;&gt;mynew&lt;/span&gt;</code> 函数可以模拟 <code>&lt;span class=&quot;ne-text&quot;&gt;new&lt;/span&gt;</code> 操作符的行为，但在实际开发中，直接使用 <code>&lt;span class=&quot;ne-text&quot;&gt;new&lt;/span&gt;</code> 操作符更为简洁和可靠。此外，现代 JavaScript 开发中更推荐使用 <code>&lt;span class=&quot;ne-text&quot;&gt;class&lt;/span&gt;</code> 关键字来定义类和构造函数。</p><hr></details><h2 id="平时是怎么调试-s的" tabindex="-1"><a class="header-anchor" href="#平时是怎么调试-s的"><span>平时是怎么调试]S的</span></a></h2><p><strong>浏览器开发者工具</strong></p><p><code>&lt;span class=&quot;ne-text&quot;&gt;console&lt;/span&gt;</code>** API**</p><p><strong>断点</strong></p><details class="lake-collapse"><summary id="u2eb6fc79"><span class="ne-text">拓展</span></summary><p><strong>调试 JavaScript 代码是开发过程中的一个重要环节，可以帮助你理解代码的执行流程、查找和修复错误。以下是一些常用的 JavaScript 调试技巧和工具：</strong></p><ol><li><strong>浏览器开发者工具</strong> <strong>:</strong></li></ol><ul><li><strong>Chrome DevTools</strong> <strong>: Chrome 浏览器内置的开发者工具非常强大，提供了元素检查、控制台、网络监控、性能分析、内存分析、断点调试等功能。</strong></li><li><strong>Firefox Developer Tools</strong> <strong>: Firefox 浏览器的开发者工具同样提供了类似的功能，包括但不限于元素检查器、控制台、调试器、网络监控等。</strong></li></ul><ol start="2"><li>**使用 <strong><code>&lt;span class=&quot;ne-text&quot;&gt;console&lt;/span&gt;</code> ** API</strong> <strong>:</strong></li></ol><ul><li><code>&lt;span class=&quot;ne-text&quot;&gt;console.log()&lt;/span&gt;</code>: 输出信息到控制台，是最常用的调试方法。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;console.error()&lt;/span&gt;</code>: 输出错误信息，通常会显示在控制台的错误区域。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;console.warn()&lt;/span&gt;</code>: 输出警告信息，用于提示潜在的问题。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;console.info()&lt;/span&gt;</code>: 输出一般信息。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;console.debug()&lt;/span&gt;</code>: 输出调试信息，通常只在调试模式下显示。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;console.table()&lt;/span&gt;</code>: 以表格形式展示对象的属性。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;console.group()&lt;/span&gt;</code> 和 <code>&lt;span class=&quot;ne-text&quot;&gt;console.groupEnd()&lt;/span&gt;</code>: 用于将相关的输出分组。</li></ul><ol start="3"><li><strong>断点和步进执行</strong> <strong>:</strong></li></ol><ul><li><strong>在代码中你想要检查的地方设置断点。</strong></li><li><strong>使用步进（Step into）、步过（Step over）、步出（Step out）来逐行或逐函数执行代码。</strong></li></ul><ol start="4"><li>**使用 <strong><code>&lt;span class=&quot;ne-text&quot;&gt;debugger&lt;/span&gt;</code> ** 语句</strong> <strong>:</strong></li></ol><ul><li>**在代码中添加 **<code>&lt;span class=&quot;ne-text&quot;&gt;debugger&lt;/span&gt;</code> 语句，当执行到这一行时，如果开发者工具是打开状态，代码执行将暂停。</li></ul><ol start="5"><li><strong>源代码映射（Source Maps）</strong> <strong>:</strong></li></ol><ul><li><strong>当你使用构建工具（如 Webpack、Gulp 等）压缩或转译代码时，源代码映射可以帮助你将压缩后的代码映射回原始源代码，方便调试。</strong></li></ul><ol start="6"><li><strong>性能分析器</strong> <strong>:</strong></li></ol><ul><li><strong>使用浏览器的 Performance tab 来记录和分析页面加载和运行时的性能瓶颈。</strong></li></ul><ol start="7"><li><strong>内存分析</strong> <strong>:</strong></li></ol><ul><li><strong>使用 Heap Snapshot 和 Allocation Timeline 来分析内存使用情况，查找内存泄漏。</strong></li></ul><ol start="8"><li><strong>网络监控</strong> <strong>:</strong></li></ol><ul><li><strong>监控和分析页面的网络请求，包括请求的资源、加载时间、请求方法、状态码等。</strong></li></ul><ol start="9"><li><strong>使用调试器 API</strong> <strong>:</strong></li></ol><ul><li>**浏览器提供了一些调试相关的 API，如 **<code>&lt;span class=&quot;ne-text&quot;&gt;console.clear()&lt;/span&gt;</code> 来清除控制台输出，<code>&lt;span class=&quot;ne-text&quot;&gt;console.count()&lt;/span&gt;</code> 来计数同一行代码被执行的次数等。</li></ul><ol start="10"><li><strong>单元测试</strong> <strong>:</strong></li></ol><ul><li><strong>使用单元测试框架（如 Jest、Mocha、Jasmine）来编写测试用例，自动测试代码逻辑。</strong></li></ul><ol start="11"><li><strong>代码审查</strong> <strong>:</strong></li></ol><ul><li><strong>通过代码审查来发现潜在的问题，这可以是自我审查或者团队成员之间的相互审查。</strong></li></ul><ol start="12"><li><strong>使用第三方调试工具</strong> <strong>:</strong></li></ol><ul><li><strong>除了浏览器开发者工具，还有许多第三方调试工具，如 Visual Studio Code 的调试功能、Chrome 插件等。</strong></li></ul><p><strong>调试是一个迭代的过程，通常需要结合多种方法来定位和解决问题。随着经验的积累，你会更熟练地使用这些工具和技巧。</strong></p></details><h2 id="解释一下webworker" tabindex="-1"><a class="header-anchor" href="#解释一下webworker"><span>解释一下webworker</span></a></h2><p><a href="https://blog.csdn.net/weixin_37680520/article/details/117623499" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/weixin_37680520/article/details/117623499</a></p><p><a href="https://blog.csdn.net/chenyajundd/article/details/137033829" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/chenyajundd/article/details/137033829</a></p><p><strong>JavaScript</strong>是单线程模型，即所有任务只能在同一个线程上面完成</p><p><strong>Web Worker 的作用，就是为 JavaScript</strong> ** 创造多线程环境** <strong>，允许主线程创建 Worker 线程，将一些任务分配给后者运行。</strong></p><h4 id="web-worker-有以下几个使用注意点。" tabindex="-1"><a class="header-anchor" href="#web-worker-有以下几个使用注意点。"><span>Web Worker 有以下几个使用注意点。</span></a></h4><p>**（1）**<strong>同源限制</strong></p><p><strong>分配给 Worker 线程运行的脚本文件，</strong> <strong>必须与主线程的脚本文件同源</strong> <strong>。</strong></p><p>**（2）**<strong>DOM 限制</strong></p><p><strong>Worker 线程所在的全局对象，与主线程不一样，无法读取主线程所在网页的 DOM 对象，也无法使用document、window、parent这些对象。但是，Worker 线程可以navigator对象和location对象。</strong></p><p>**（3）**<strong>通信联系</strong></p><p><strong>Worker 线程和主线程不在同一个上下文环境，它们不能直接通信，必须****通过消息</strong>完成。</p><p>**（4）**<strong>脚本限制</strong></p><p><strong>Worker 线程不能执行alert()方法和confirm()方法，但可以</strong> <strong>使用 XMLHttpRequest 对象发出 AJAX 请求</strong> <strong>。</strong></p><p>**（5）**<strong>文件限制</strong></p><p><strong>Worker 线程无法读取本地文件，即不能打开本机的文件系统（file://），它所加</strong> <strong>载的脚本，必须来自网络</strong> <strong>。</strong></p><h4 id="如何使用web-worker" tabindex="-1"><a class="header-anchor" href="#如何使用web-worker"><span>如何使用web worker</span></a></h4><p>**发送消息 : **<strong>postMessage</strong></p><p>**接收消息 : **<strong>onmessage</strong></p><details class="lake-collapse"><summary id="ub11d4457"><span class="ne-text">拓展</span></summary><p><strong>Web Workers 是一种在 Web 应用程序中进行多线程编程的机制。它允许你在后台线程中运行 JavaScript 代码，而不会干扰主线程的执行。这意味着你可以在不阻塞用户界面的情况下执行计算密集型任务。</strong></p><p><strong>以下是 Web Workers 的一些关键点：</strong></p><ol><li><strong>线程隔离</strong> <strong>：Web Workers 运行在与主线程（UI 线程）隔离的环境中。这种隔离确保了 Worker 内的脚本错误不会导致主线程崩溃，同时也避免了 Worker 访问 DOM 的能力，因为它们在不同的执行环境中运行。</strong></li><li><strong>通信</strong> **：主线程和 Worker 之间通过消息传递进行通信。你可以使用 **<code>&lt;span class=&quot;ne-text&quot;&gt;postMessage()&lt;/span&gt;</code> 方法发送消息，并通过监听 <code>&lt;span class=&quot;ne-text&quot;&gt;message&lt;/span&gt;</code> 事件来接收消息。这种机制是双向的，允许两个线程之间交换数据。</li><li><strong>不访问 DOM</strong> <strong>：由于 Web Workers 运行在后台线程，它们没有权限直接访问 DOM。如果需要与 DOM 交互，你必须在主线程中执行这些操作，然后通过消息传递与 Worker 共享结果。</strong></li><li><strong>生命周期</strong> **：你可以使用 **<code>&lt;span class=&quot;ne-text&quot;&gt;Worker&lt;/span&gt;</code> 构造函数创建一个新的 Worker，然后通过调用它的 <code>&lt;span class=&quot;ne-text&quot;&gt;terminate()&lt;/span&gt;</code> 方法来终止它。当 Worker 执行完毕或者被终止时，它会自动清理资源。</li><li><strong>用途</strong> <strong>：Web Workers 适用于执行那些需要大量计算的任务，比如数据分析、视频处理、音频处理、复杂的图形渲染等，而不会导致用户界面变得不响应。</strong></li><li><strong>限制</strong> **：每个 Worker 都有自己的全局上下文，这意味着它们有自己的变量和全局对象。但是，Worker 不能共享全局变量或者全局对象（如 **<code>&lt;span class=&quot;ne-text&quot;&gt;window&lt;/span&gt;</code> 或 <code>&lt;span class=&quot;ne-text&quot;&gt;document&lt;/span&gt;</code>）。</li><li><strong>同源策略</strong> <strong>：Web Workers 受到同源策略的限制，即它们只能加载与主页面相同来源的脚本。</strong></li><li><strong>性能考虑</strong> <strong>：虽然 Web Workers 可以提高性能，但它们也有自己的开销。创建和通信都涉及到一定的性能成本，因此应该明智地使用，避免过度使用。</strong></li></ol><p><strong>下面是一个简单的 Web Workers 示例：</strong></p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// main.js</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 创建一个新的 Worker</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> myWorker</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Worker</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;worker.js&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 接收来自 Worker 的消息</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">myWorker</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">onmessage</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Message received from worker&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">data</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 发送消息给 Worker</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">myWorker</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">postMessage</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Hello, worker!&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// worker.js</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 接收来自主线程的消息</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">onmessage</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Message received from main script&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">data</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 做一些计算...</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 发送消息回主线程</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">postMessage</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Hi, main script!&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">};</span></span></code></pre></div><p>**在这个例子中，主线程创建了一个 Worker，并发送了一条消息。Worker 接收消息，处理它，然后回复主线程。主线程监听 **<code>&lt;span class=&quot;ne-text&quot;&gt;message&lt;/span&gt;</code> 事件来接收 Worker 的响应。</p></details><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">1.主线程采用</span><span style="color:#C678DD;--shiki-dark:#C678DD;">new</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">命令，调用</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">Worker</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()构造函数，新建一个 </span><span style="color:#E06C75;--shiki-dark:#E06C75;">Worker</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> 线程。</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> worker</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Worker</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;./work.js&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">2.主线程调用</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">worker</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">postMessage</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()方法，向 </span><span style="color:#E06C75;--shiki-dark:#E06C75;">Worker</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> 发消息。</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">worker</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">postMessage</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Hello World&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">它可以是各种数据类型，包括二进制数据。</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">3.主线程通过</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">worker</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">onmessage</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">指定监听函数，接收子线程发回来的消息。</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">worker</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">onmessage</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Received message &#39;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> +</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> event</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">data</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  doSomething</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> doSomething</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 执行任务</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  worker</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">postMessage</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Work done!&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 这里的worker.onmessage 也可以换成self.addEventListener ,self代表子线程自身，即子线程的全局对象  等同于</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;message&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">postMessage</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;You said: &#39;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> +</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">data</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">4.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">Worker</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> 完成任务以后，主线程就可以把它关掉。</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">worker</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">terminate</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">5.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">Worker</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> 内部如果要加载其他脚本，有一个专门的方法</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">importScripts</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()。</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">importScripts</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;script1.js&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;script2.js&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">6.主线程可以监听 </span><span style="color:#E06C75;--shiki-dark:#E06C75;">Worker</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> 是否发生错误。如果发生错误，</span><span style="color:#E06C75;--shiki-dark:#E06C75;">Worker</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> 会触发主线程的</span><span style="color:#E06C75;--shiki-dark:#E06C75;">error</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">事件。</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">worker</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">onerror</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">([</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">    &#39;ERROR: Line &#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">lineno</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39; in &#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">filename</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;: &#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">message</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  ].</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">join</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 或者</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">worker</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;error&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="navigator-javascript-navigator对象详解" tabindex="-1"><a class="header-anchor" href="#navigator-javascript-navigator对象详解"><span>Navigator -Javascript navigator对象详解</span></a></h2><p><a href="https://blog.csdn.net/cuclife/article/details/139061021" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/cuclife/article/details/139061021</a></p><p><a href="https://blog.csdn.net/cuclife/article/details/139061021" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/cuclife/article/details/139061021</a></p><p><code>&lt;span class=&quot;ne-text&quot;&gt;navigator&lt;/span&gt;</code>对象是<strong>JavaScript</strong>中的一个内置对象，它提供了有关浏览器的信息。</p><p><strong>帮助开发者</strong> <strong>检测用户的浏览器环境</strong> <strong>，从而实现浏览器兼容性处理或者功能检测。</strong></p><h4 id="一、属性和方法概览" tabindex="-1"><a class="header-anchor" href="#一、属性和方法概览"><span>一、属性和方法概览</span></a></h4><ul><li><code>&lt;span class=&quot;ne-text&quot;&gt;navigator.appCodeName&lt;/span&gt;</code>: 返回<strong>浏览器</strong>的 <strong>代码名</strong> <strong>，通常为&quot;Mozilla&quot;。</strong></li><li><code>&lt;span class=&quot;ne-text&quot;&gt;navigator.appName&lt;/span&gt;</code>: 返回浏览器的 <strong>名称</strong> <strong>，如&quot;Microsoft Internet Explorer&quot;。</strong></li><li><code>&lt;span class=&quot;ne-text&quot;&gt;navigator.appVersion&lt;/span&gt;</code>: 返回浏览器的 <strong>平台和版本信息</strong> <strong>。</strong></li><li><code>&lt;span class=&quot;ne-text&quot;&gt;navigator.userAgent&lt;/span&gt;</code>: 返回 <strong>用户代理字符串</strong> <strong>，包含****浏览器类型、版本号及操作系统</strong>等信息。</li><li><code>&lt;span class=&quot;ne-text&quot;&gt;navigator.platform&lt;/span&gt;</code>: 返回运行浏览器的 <strong>操作系统平台</strong> <strong>。</strong></li><li><code>&lt;span class=&quot;ne-text&quot;&gt;navigator.language&lt;/span&gt;</code>: 返回用户的 <strong>首选语言</strong> <strong>。</strong></li><li><code>&lt;span class=&quot;ne-text&quot;&gt;navigator.cookieEnabled&lt;/span&gt;</code>: 告诉你浏览器 <strong>是否支持并启用了cookie</strong> <strong>。</strong></li><li><code>&lt;span class=&quot;ne-text&quot;&gt;navigator.onLine&lt;/span&gt;</code>: 表示用户当前 <strong>是否在线</strong> <strong>。</strong></li><li><code>&lt;span class=&quot;ne-text&quot;&gt;navigator.geolocation&lt;/span&gt;</code>: 提供了 <strong>地理定位的功能</strong> <strong>（如果浏览器支持的话）。</strong></li><li><code>&lt;span class=&quot;ne-text&quot;&gt;navigator.vendor&lt;/span&gt;</code>: 返回浏览器 <strong>供应商名称</strong> <strong>。</strong></li><li><strong>…还有更多，比如与硬件相关的属性（比如</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;navigator.hardwareConcurrency&lt;/span&gt;</code> <strong>查询CPU核心数</strong> <strong>，但使用需谨慎考虑隐私问题）。</strong></li></ul><h4 id="三、注意事项" tabindex="-1"><a class="header-anchor" href="#三、注意事项"><span>三、注意事项</span></a></h4><ol><li><strong>隐私与安全</strong> <strong>：使用</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;navigator&lt;/span&gt;</code>中的某些属性（如 <code>&lt;span class=&quot;ne-text&quot;&gt;geolocation&lt;/span&gt;</code>）时，应确保遵循用户的隐私偏好和相关法律法规，提供明确的用户许可请求。</li><li><strong>一致性问题</strong> <strong>：不同浏览器对</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;navigator&lt;/span&gt;</code>对象的支持程度和返回值可能有差异，编写代码时应考虑这些差异，尽量采用广泛兼容的特性。</li><li><strong>User-Agent嗅探</strong> <strong>：虽然可以通过</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;navigator.userAgent&lt;/span&gt;</code>进行浏览器或设备的简单识别，但这种方法不鼓励用于功能检测，因为User-Agent可以被轻易篡改，且现代Web开发更推荐使用特性检测（Feature Detection）而非浏览器嗅探。</li><li><strong>性能考量</strong> <strong>：频繁访问某些</strong> <code>&lt;span class=&quot;ne-text&quot;&gt;navigator&lt;/span&gt;</code>属性可能影响性能，特别是像 <code>&lt;span class=&quot;ne-text&quot;&gt;navigator.hardwareConcurrency&lt;/span&gt;</code>这样可能涉及复杂计算的属性。</li><li></li></ol><hr><h2 id="三种事件模型是什么" tabindex="-1"><a class="header-anchor" href="#三种事件模型是什么"><span>三种事件模型是什么？</span></a></h2><details class="lake-collapse"><summary id="u3a87ef1c"><span class="ne-text">拓展</span></summary><p><strong>在 JavaScript 中，事件模型指的是事件的触发、处理和分发的方式。主要有三种事件模型：</strong></p><ol><li><strong>DOM 0 级事件模型</strong> <strong>：</strong></li></ol><ul><li><strong>这是最古老的事件模型，直接绑定事件处理器到元素上。</strong></li><li><strong>没有事件监听器的概念，而是直接将函数赋值给 HTML 元素的事件属性。</strong></li><li><strong>这种方式的缺点是同一个元素的同一个事件只能绑定一个处理函数，而且不支持捕获和冒泡阶段。</strong></li><li><strong>示例：</strong></li></ul><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementById</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;myButton&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">onclick</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  alert</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Button clicked!&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">};</span></span></code></pre></div><ol start="2"><li><strong>DOM 2 级事件模型</strong> <strong>：</strong></li></ol><ul><li><strong>也称为 DOM Level 2 Events，引入了事件监听器的概念。</strong></li><li>**支持 **<code>&lt;span class=&quot;ne-text&quot;&gt;addEventListener&lt;/span&gt;</code> 方法，可以为元素添加多个事件处理器，并且可以指定事件处理的三个阶段：无捕获（bubble）、捕获（capture）和冒泡（bubbling）。</li><li>**可以使用 **<code>&lt;span class=&quot;ne-text&quot;&gt;removeEventListener&lt;/span&gt;</code> 方法移除事件处理器。</li><li><strong>示例：</strong></li></ul><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> button</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementById</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;myButton&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">button</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;click&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  alert</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Button clicked!&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// false 表示在冒泡阶段执行</span></span></code></pre></div><ol start="3"><li><strong>IE 事件模型</strong> <strong>：</strong></li></ol><ul><li><strong>这是 Internet Explorer 浏览器特有的事件模型，与其他浏览器的 DOM 事件模型有所不同。</strong></li><li>**IE 事件模型使用 **<code>&lt;span class=&quot;ne-text&quot;&gt;attachEvent&lt;/span&gt;</code> 方法来绑定事件处理器，使用 <code>&lt;span class=&quot;ne-text&quot;&gt;detachEvent&lt;/span&gt;</code> 方法来移除事件处理器。</li><li><strong>IE 事件模型中的事件对象 (</strong><code>&lt;span class=&quot;ne-text&quot;&gt;event&lt;/span&gt;</code>) 不是通过参数传递给事件处理器的，而是作为全局 <code>&lt;span class=&quot;ne-text&quot;&gt;window.event&lt;/span&gt;</code> 对象。</li><li><strong>示例：</strong></li></ul><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> button</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getElementById</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;myButton&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">button</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">attachEvent</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;onclick&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  alert</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Button clicked!&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">});</span></span></code></pre></div><p><strong>在现代 Web 开发中，推荐使用 DOM 2 级事件模型，因为它提供了更多的灵活性和控制能力。同时，为了兼容不支持 DOM 2 级事件模型的旧版 IE 浏览器，开发者可能需要使用 polyfills 或其他兼容性解决方案。</strong></p><p><strong>需要注意的是，随着 Web 标准的不断发展，旧版的 IE 浏览器已经逐渐被淘汰，现代浏览器都支持 DOM 2 级事件模型。因此，DOM 2 级事件模型现在是事实上的标准，并且在现代 Web 开发中被广泛使用。</strong></p></details>`,270)]))}const k=a(r,[["render",p],["__file","js.html.vue"]]),d=JSON.parse('{"path":"/posts/Web/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/js.html","title":"JavaScript","lang":"zh-CN","frontmatter":{"icon":"js","date":"2022-10-25T00:00:00.000Z","category":["JavaScript"],"tag":null,"star":true,"description":"JavaScript Js相关 Js相关 Js的基础类型，typeof和instanceof的区别 数组的forEach和map方法有哪些区别？常用哪些方法去对数组进行增、删、改 闭包和作用域 实现一个类以关键字new功能的函数 如何实现继承（原型和原型链） 箭头函数和普通函数有什么区别 迭代器(iterator)接口和生成器(generator)函数...","head":[["meta",{"property":"og:url","content":"https://weijordan.com/posts/Web/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/js.html"}],["meta",{"property":"og:site_name","content":"Mr.子冥"}],["meta",{"property":"og:title","content":"JavaScript"}],["meta",{"property":"og:description","content":"JavaScript Js相关 Js相关 Js的基础类型，typeof和instanceof的区别 数组的forEach和map方法有哪些区别？常用哪些方法去对数组进行增、删、改 闭包和作用域 实现一个类以关键字new功能的函数 如何实现继承（原型和原型链） 箭头函数和普通函数有什么区别 迭代器(iterator)接口和生成器(generator)函数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.nlark.com/yuque/0/2024/jpeg/45821596/1725869264919-9ef89373-00cd-4fa7-b6b5-798dfa253eeb.jpeg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-22T10:43:44.000Z"}],["meta",{"property":"article:author","content":"子冥"}],["meta",{"property":"article:published_time","content":"2022-10-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-22T10:43:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript\\",\\"image\\":[\\"https://cdn.nlark.com/yuque/0/2024/jpeg/45821596/1725869264919-9ef89373-00cd-4fa7-b6b5-798dfa253eeb.jpeg\\",\\"https://cdn.nlark.com/yuque/0/2024/png/45821596/1725871667537-b2b65050-185e-4356-9299-a56602e8b8bf.png\\",\\"https://cdn.nlark.com/yuque/0/2024/png/45821596/1725874334575-bdf67e0e-711e-4e31-9111-719cfc753348.png\\",\\"https://cdn.nlark.com/yuque/0/2024/jpeg/45821596/1725875639401-9aeff409-42f7-44b6-bd00-74d75ecf6fe7.jpeg\\",\\"https://cdn.nlark.com/yuque/0/2024/webp/45821596/1726196648392-22b865e6-a191-4e16-bd8f-67cf6d102914.webp\\",\\"https://cdn.nlark.com/yuque/0/2024/png/45821596/1726211840415-e5bacd85-cb38-4886-8695-67e88228be8b.png\\"],\\"datePublished\\":\\"2022-10-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-22T10:43:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"子冥\\",\\"url\\":\\"https://weijordan.com\\"}]}"]]},"headers":[{"level":2,"title":"js 类型判断ttps://blog.csdn.net/mywpython/article/details/134671186","slug":"js-类型判断ttps-blog-csdn-net-mywpython-article-details-134671186","link":"#js-类型判断ttps-blog-csdn-net-mywpython-article-details-134671186","children":[]},{"level":2,"title":"怎么判断两个对象相等？","slug":"怎么判断两个对象相等","link":"#怎么判断两个对象相等","children":[{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"如何判断空对象？","slug":"如何判断空对象","link":"#如何判断空对象","children":[{"level":3,"title":"判断空对象","slug":"判断空对象","link":"#判断空对象","children":[]},{"level":3,"title":"Object.getOwnPropertyNames()","slug":"object-getownpropertynames","link":"#object-getownpropertynames","children":[]},{"level":3,"title":"Reflect.ownKeys()","slug":"reflect-ownkeys","link":"#reflect-ownkeys","children":[]},{"level":3,"title":"总结","slug":"总结-1","link":"#总结-1","children":[]}]},{"level":2,"title":"数组的forEach和map方法有哪些区别？常用哪些方法去对数组进行增、删、改","slug":"数组的foreach和map方法有哪些区别-常用哪些方法去对数组进行增、删、改","link":"#数组的foreach和map方法有哪些区别-常用哪些方法去对数组进行增、删、改","children":[{"level":3,"title":"forEach 方法","slug":"foreach-方法","link":"#foreach-方法","children":[]},{"level":3,"title":"map 方法","slug":"map-方法","link":"#map-方法","children":[]},{"level":3,"title":"增删改方法","slug":"增删改方法","link":"#增删改方法","children":[]}]},{"level":2,"title":"闭包和作用域","slug":"闭包和作用域","link":"#闭包和作用域","children":[]},{"level":2,"title":"如何实现继承（原型和原型链）","slug":"如何实现继承-原型和原型链","link":"#如何实现继承-原型和原型链","children":[{"level":3,"title":"总结","slug":"总结-2","link":"#总结-2","children":[]},{"level":3,"title":"2.4 原型相关的面试题目","slug":"_2-4-原型相关的面试题目","link":"#_2-4-原型相关的面试题目","children":[]},{"level":3,"title":"六、寄生式组合继承","slug":"六、寄生式组合继承","link":"#六、寄生式组合继承","children":[]},{"level":3,"title":"小结","slug":"小结","link":"#小结","children":[]},{"level":3,"title":"七、es6 继承","slug":"七、es6-继承","link":"#七、es6-继承","children":[]}]},{"level":2,"title":"箭头函数和普通函数有什么区别","slug":"箭头函数和普通函数有什么区别","link":"#箭头函数和普通函数有什么区别","children":[]},{"level":2,"title":"浏览器的事件循环机制","slug":"浏览器的事件循环机制","link":"#浏览器的事件循环机制","children":[]},{"level":2,"title":"列举宿主对象、内置对象、原生对象并说明其定义","slug":"列举宿主对象、内置对象、原生对象并说明其定义","link":"#列举宿主对象、内置对象、原生对象并说明其定义","children":[{"level":3,"title":"宿主对象（Host Objects）","slug":"宿主对象-host-objects","link":"#宿主对象-host-objects","children":[]},{"level":3,"title":"内置对象（Built-in Objects）","slug":"内置对象-built-in-objects","link":"#内置对象-built-in-objects","children":[]},{"level":3,"title":"原生对象（Native Objects）","slug":"原生对象-native-objects","link":"#原生对象-native-objects","children":[]},{"level":3,"title":"总结","slug":"总结-3","link":"#总结-3","children":[]}]},{"level":2,"title":"=== 和==的区别？","slug":"和-的区别","link":"#和-的区别","children":[{"level":3,"title":"严格相等运算符 (<span class=\\"ne-text\\">===</span>)","slug":"严格相等运算符-span-class-ne-text-span","link":"#严格相等运算符-span-class-ne-text-span","children":[]},{"level":3,"title":"相等运算符 (<span class=\\"ne-text\\">==</span>)","slug":"相等运算符-span-class-ne-text-span","link":"#相等运算符-span-class-ne-text-span","children":[]},{"level":3,"title":"推荐使用","slug":"推荐使用","link":"#推荐使用","children":[]},{"level":3,"title":"例子","slug":"例子","link":"#例子","children":[]}]},{"level":2,"title":"null,undefined的区别","slug":"null-undefined的区别","link":"#null-undefined的区别","children":[{"level":3,"title":"null","slug":"null","link":"#null","children":[]},{"level":3,"title":"undefined","slug":"undefined","link":"#undefined","children":[]},{"level":3,"title":"区别","slug":"区别","link":"#区别","children":[]},{"level":3,"title":"例子","slug":"例子-1","link":"#例子-1","children":[]}]},{"level":2,"title":"怎么获取当前日期(年-月-日时：分：秒)？","slug":"怎么获取当前日期-年-月-日时-分-秒","link":"#怎么获取当前日期-年-月-日时-分-秒","children":[]},{"level":2,"title":"类数组,数组,对象,之间的 关系和互相转换方法","slug":"类数组-数组-对象-之间的-关系和互相转换方法","link":"#类数组-数组-对象-之间的-关系和互相转换方法","children":[{"level":3,"title":"类数组（伪数组）与数组","slug":"类数组-伪数组-与数组","link":"#类数组-伪数组-与数组","children":[]},{"level":3,"title":"数组与对象","slug":"数组与对象","link":"#数组与对象","children":[]}]},{"level":2,"title":"变量提升是什么？与函数提升的区别？","slug":"变量提升是什么-与函数提升的区别","link":"#变量提升是什么-与函数提升的区别","children":[{"level":3,"title":"变量提升","slug":"变量提升","link":"#变量提升","children":[]},{"level":3,"title":"函数提升","slug":"函数提升","link":"#函数提升","children":[]},{"level":3,"title":"区别","slug":"区别-1","link":"#区别-1","children":[]},{"level":3,"title":"函数表达式与函数声明的区别","slug":"函数表达式与函数声明的区别","link":"#函数表达式与函数声明的区别","children":[]}]},{"level":2,"title":"什么是作用域链？如何延长？","slug":"什么是作用域链-如何延长","link":"#什么是作用域链-如何延长","children":[]},{"level":2,"title":"如何实现数组的随机排序？","slug":"如何实现数组的随机排序","link":"#如何实现数组的随机排序","children":[]},{"level":2,"title":"dom节点的Attribute和Property有何区别？","slug":"dom节点的attribute和property有何区别","link":"#dom节点的attribute和property有何区别","children":[{"level":3,"title":"Attribute","slug":"attribute","link":"#attribute","children":[]},{"level":3,"title":"Property","slug":"property","link":"#property","children":[]},{"level":3,"title":"区别","slug":"区别-2","link":"#区别-2","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}]},{"level":2,"title":"dom结构操作怎样添加、移除、移动、复制、创建和查找节点？","slug":"dom结构操作怎样添加、移除、移动、复制、创建和查找节点","link":"#dom结构操作怎样添加、移除、移动、复制、创建和查找节点","children":[{"level":3,"title":"添加节点","slug":"添加节点","link":"#添加节点","children":[]},{"level":3,"title":"移除节点","slug":"移除节点","link":"#移除节点","children":[]},{"level":3,"title":"移动节点","slug":"移动节点","link":"#移动节点","children":[]},{"level":3,"title":"替换节点","slug":"替换节点","link":"#替换节点","children":[]},{"level":3,"title":"复制节点","slug":"复制节点","link":"#复制节点","children":[]},{"level":3,"title":"创建节点","slug":"创建节点","link":"#创建节点","children":[]},{"level":3,"title":"查找节点","slug":"查找节点","link":"#查找节点","children":[]}]},{"level":2,"title":"什么是事件冒泡，它是如何工作的？如何阻止事件冒泡？","slug":"什么是事件冒泡-它是如何工作的-如何阻止事件冒泡","link":"#什么是事件冒泡-它是如何工作的-如何阻止事件冒泡","children":[{"level":3,"title":"事件冒泡（Event Bubbling）","slug":"事件冒泡-event-bubbling","link":"#事件冒泡-event-bubbling","children":[]},{"level":3,"title":"如何阻止事件冒泡","slug":"如何阻止事件冒泡","link":"#如何阻止事件冒泡","children":[]},{"level":3,"title":"总结","slug":"总结-4","link":"#总结-4","children":[]}]},{"level":2,"title":"什么是事件捕获，它是如何工作的？","slug":"什么是事件捕获-它是如何工作的","link":"#什么是事件捕获-它是如何工作的","children":[{"level":3,"title":"工作原理","slug":"工作原理-1","link":"#工作原理-1","children":[]},{"level":3,"title":"事件传播的三个阶段","slug":"事件传播的三个阶段","link":"#事件传播的三个阶段","children":[]},{"level":3,"title":"如何使用事件捕获","slug":"如何使用事件捕获","link":"#如何使用事件捕获","children":[]},{"level":3,"title":"如何阻止事件捕获","slug":"如何阻止事件捕获","link":"#如何阻止事件捕获","children":[]},{"level":3,"title":"总结","slug":"总结-5","link":"#总结-5","children":[]}]},{"level":2,"title":"dom的事件模型","slug":"dom的事件模型","link":"#dom的事件模型","children":[{"level":3,"title":"DOM 事件模型","slug":"dom-事件模型","link":"#dom-事件模型","children":[]},{"level":3,"title":"事件模型","slug":"事件模型","link":"#事件模型","children":[]},{"level":3,"title":"DOM Level 2事件模型","slug":"dom-level-2事件模型","link":"#dom-level-2事件模型","children":[]},{"level":3,"title":"事件对象","slug":"事件对象","link":"#事件对象","children":[]},{"level":3,"title":"事件委托","slug":"事件委托","link":"#事件委托","children":[]}]},{"level":2,"title":"事件三要素是什么？","slug":"事件三要素是什么","link":"#事件三要素是什么","children":[{"level":3,"title":"事件对象（Event Object）","slug":"事件对象-event-object","link":"#事件对象-event-object","children":[]},{"level":3,"title":"示例","slug":"示例-4","link":"#示例-4","children":[]}]},{"level":2,"title":"获取元素位置？","slug":"获取元素位置","link":"#获取元素位置","children":[{"level":3,"title":"1. <span class=\\"ne-text\\">offsetLeft</span> 和 <span class=\\"ne-text\\">offsetTop</span>","slug":"_1-span-class-ne-text-offsetleft-span-和-span-class-ne-text-offsettop-span","link":"#_1-span-class-ne-text-offsetleft-span-和-span-class-ne-text-offsettop-span","children":[]},{"level":3,"title":"2. <span class=\\"ne-text\\">getBoundingClientRect()</span>","slug":"_2-span-class-ne-text-getboundingclientrect-span","link":"#_2-span-class-ne-text-getboundingclientrect-span","children":[]},{"level":3,"title":"3. <span class=\\"ne-text\\">offsetParent</span>","slug":"_3-span-class-ne-text-offsetparent-span","link":"#_3-span-class-ne-text-offsetparent-span","children":[]},{"level":3,"title":"4. <span class=\\"ne-text\\">clientLeft</span> 和 <span class=\\"ne-text\\">clientTop</span>","slug":"_4-span-class-ne-text-clientleft-span-和-span-class-ne-text-clienttop-span","link":"#_4-span-class-ne-text-clientleft-span-和-span-class-ne-text-clienttop-span","children":[]},{"level":3,"title":"5. <span class=\\"ne-text\\">scrollLeft</span> 和 <span class=\\"ne-text\\">scrollTop</span>","slug":"_5-span-class-ne-text-scrollleft-span-和-span-class-ne-text-scrolltop-span","link":"#_5-span-class-ne-text-scrollleft-span-和-span-class-ne-text-scrolltop-span","children":[]},{"level":3,"title":"示例：获取元素相对于视口的位置","slug":"示例-获取元素相对于视口的位置","link":"#示例-获取元素相对于视口的位置","children":[]}]},{"level":2,"title":"setTimeout和setInterval的区别及用法是什么？","slug":"settimeout和setinterval的区别及用法是什么","link":"#settimeout和setinterval的区别及用法是什么","children":[{"level":3,"title":"setTimeout","slug":"settimeout","link":"#settimeout","children":[]},{"level":3,"title":"setInterval","slug":"setinterval","link":"#setinterval","children":[]},{"level":3,"title":"区别","slug":"区别-3","link":"#区别-3","children":[]},{"level":3,"title":"停止定时器","slug":"停止定时器","link":"#停止定时器","children":[]},{"level":3,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]}]},{"level":2,"title":"setTimeout来实现setInterval","slug":"settimeout来实现setinterval","link":"#settimeout来实现setinterval","children":[{"level":3,"title":"mySetInterval 函数","slug":"mysetinterval-函数","link":"#mysetinterval-函数","children":[]},{"level":3,"title":"myClearInterval 函数","slug":"myclearinterval-函数","link":"#myclearinterval-函数","children":[]},{"level":3,"title":"使用示例","slug":"使用示例","link":"#使用示例","children":[]},{"level":3,"title":"注意事项","slug":"注意事项-1","link":"#注意事项-1","children":[]}]},{"level":2,"title":"document.write和innerHTML的区别？","slug":"document-write和innerhtml的区别","link":"#document-write和innerhtml的区别","children":[{"level":3,"title":"document.write","slug":"document-write","link":"#document-write","children":[]},{"level":3,"title":"innerHTML","slug":"innerhtml","link":"#innerhtml","children":[]},{"level":3,"title":"区别","slug":"区别-4","link":"#区别-4","children":[]},{"level":3,"title":"示例","slug":"示例-5","link":"#示例-5","children":[]}]},{"level":2,"title":"元素拖动如何实现，原理是怎样？","slug":"元素拖动如何实现-原理是怎样","link":"#元素拖动如何实现-原理是怎样","children":[{"level":3,"title":"使用原生JavaScript","slug":"使用原生javascript","link":"#使用原生javascript","children":[]},{"level":3,"title":"使用HTML5拖放API","slug":"使用html5拖放api","link":"#使用html5拖放api","children":[]},{"level":3,"title":"原理","slug":"原理","link":"#原理","children":[]}]},{"level":2,"title":"图片懒加载和预加载实现","slug":"图片懒加载和预加载实现","link":"#图片懒加载和预加载实现","children":[{"level":3,"title":"图片懒加载","slug":"图片懒加载","link":"#图片懒加载","children":[]},{"level":3,"title":"图片预加载","slug":"图片预加载","link":"#图片预加载","children":[]},{"level":3,"title":"选择懒加载还是预加载？","slug":"选择懒加载还是预加载","link":"#选择懒加载还是预加载","children":[]}]},{"level":2,"title":"mouseover和mouseenter的区别","slug":"mouseover和mouseenter的区别","link":"#mouseover和mouseenter的区别","children":[{"level":3,"title":"mouseover","slug":"mouseover","link":"#mouseover","children":[]},{"level":3,"title":"mouseenter","slug":"mouseenter","link":"#mouseenter","children":[]},{"level":3,"title":"区别总结","slug":"区别总结","link":"#区别总结","children":[]},{"level":3,"title":"示例","slug":"示例-6","link":"#示例-6","children":[]}]},{"level":2,"title":"new操作符做了哪些事情","slug":"new操作符做了哪些事情","link":"#new操作符做了哪些事情","children":[]},{"level":2,"title":"平时是怎么调试]S的","slug":"平时是怎么调试-s的","link":"#平时是怎么调试-s的","children":[]},{"level":2,"title":"解释一下webworker","slug":"解释一下webworker","link":"#解释一下webworker","children":[]},{"level":2,"title":"Navigator -Javascript navigator对象详解","slug":"navigator-javascript-navigator对象详解","link":"#navigator-javascript-navigator对象详解","children":[]},{"level":2,"title":"三种事件模型是什么？","slug":"三种事件模型是什么","link":"#三种事件模型是什么","children":[]}],"git":{"createdTime":1729559873000,"updatedTime":1732272224000,"contributors":[{"name":"weijordan","email":"12012972+weijordan@user.noreply.gitee.com","commits":2}]},"readingTime":{"minutes":80.4,"words":24119},"filePathRelative":"posts/Web/基础知识/js.md","localizedDate":"2022年10月25日","excerpt":"\\n<h1>Js相关</h1>\\n<details class=\\"lake-collapse\\"><summary id=\\"u8404aeb8\\"></summary>\\n<p><strong>Js相关</strong></p>\\n<p><strong>Js的基础类型，typeof和instanceof的区别</strong></p>\\n<p><strong>数组的forEach和map方法有哪些区别？常用哪些方法去对数组进行增、删、改</strong></p>\\n<p><strong>闭包和作用域</strong></p>\\n<p><strong>实现一个类以关键字new功能的函数</strong></p>\\n<p><strong>如何实现继承（原型和原型链）</strong></p>\\n<p><strong>箭头函数和普通函数有什么区别</strong></p>\\n<p><strong>迭代器(iterator)接口和生成器(generator)函数的关系</strong></p>\\n<p><strong>浏览器的事件循环机制</strong></p>\\n</details>","autoDesc":true}');export{k as comp,d as data};

import{_ as e,c as r,b as i,d as a,e as l,a as n,o}from"./app-CkhZgH8r.js";const t="/assets/1730185560029-d0504707-d457-4b10-a62d-b94c7e637a90-CjsGkN7I.png",p="/assets/1730185992106-65fc1b02-ede7-44be-b494-348c974c121d-Bde4RQgb.png",c="/assets/1730186058909-0eba5ae2-366e-4591-b937-f010b4045103-CxfFe03h.png",d="/assets/1730186087170-9d1cb5c0-dab6-4676-9350-b5729dafe6b5-DgL8fEwx.png",k="/assets/1730186131912-8ef80173-a7fa-4457-9fe2-6d4fc54d4bd2-fai28jbj.png",h="/assets/1730186266288-08eede07-74c8-4531-af26-d00061dc63aa-nkSEJD4a.png",y="/assets/1730186284798-8e19971a-4797-4988-8d7c-793b06618b88-CDZTGNO9.png",B="/assets/1730186622192-d777388e-d418-45bf-b742-cb473ae3b38f-B8emB6g_.png",u="/assets/1730186671857-6b40d156-e54e-4c56-89d4-40e9611db67a-C4H9CiaH.png",b="/assets/1730186912244-ea39b934-4236-4fea-9f78-67de794bdde6-Boy-1CVu.png",v={};function m(E,s){return o(),r("div",null,[i(' <h2 id="1.%E7%99%BB%E5%BD%95%E5%88%B0Docker%E8%B4%A6%E6%88%B7">1.准备工作</h2> '),s[0]||(s[0]=a("h2",{id:"_1-准备工作",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_1-准备工作"},[a("span",null,"1.准备工作")])],-1)),s[1]||(s[1]=a("p",null,"登录到Docker账户",-1)),s[2]||(s[2]=a("p",null,[l("官网："),a("a",{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},"Docker Hub")],-1)),s[3]||(s[3]=a("p",null,"首先，确保已经安装了Docker并且登录到Docker账户。如果没有账户，需要注册一个新的账户。",-1)),s[4]||(s[4]=a("figure",null,[a("img",{src:t,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1)),s[5]||(s[5]=a("p",null,"（也可以用github直接登录的）",-1)),i(' <h3 id="1.1-dockerhub-token">1.1 dockerhub token</h3> '),s[6]||(s[6]=n('<h3 id="_1-1-dockerhub-token" tabindex="-1"><a class="header-anchor" href="#_1-1-dockerhub-token"><span>1.1 dockerhub token</span></a></h3><p><a href="https://hub.docker.com/settings/security" target="_blank" rel="noopener noreferrer">https://hub.docker.com/settings/security</a></p><p>登录dockerhub，在用户的account settings里面获取用户token</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>或者</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>将其添加到github仓库的secrets里面，具体位置是仓库设置中的 Secrets and variables 里面的 Actions 栏目中，如下图所示，添加 Repository secrets。</p><p>进入你的项目仓库</p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>需要添加的是 <code>DOCKER_USERNAME</code>为你的docker用户名（注意是用户名，不是邮箱），还有 <code>DOCKER_TOKEN</code>为刚刚我们在dockerhub中获取的token。</p>',11)),i(' <h3 id="9ea5d211">1.2 获取github操作token</h3> '),s[7]||(s[7]=n('<h3 id="_1-2-获取github操作token" tabindex="-1"><a class="header-anchor" href="#_1-2-获取github操作token"><span>1.2 获取github操作token</span></a></h3><p><a href="https://github.com/settings/tokens" target="_blank" rel="noopener noreferrer">https://github.com/settings/tokens</a></p><p>到GitHub的用户设置中，创建一个token，需要给予repo、workflow、packages权限。如果你不知道给予什么权限，直接全给他选上，保障这个token不泄露给外部就可以了。</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>另外，expiration是过期日期，如果你担心泄漏造成问题，可以设置一个过期时间，但是需要到时间后去更新仓库的secrets。</p><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>点击确定以后会得到token，复制他，同样是到github仓库的secrets里面添加一个 <code>RELEASE_TOKEN</code> 变量。</p>',7)),i(' <h2 id="7074033f">2.上传workflows文件</h2> '),s[8]||(s[8]=a("h2",{id:"_2-上传workflows文件",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_2-上传workflows文件"},[a("span",null,"2.上传workflows文件")])],-1)),i(` <h3 id="390f4a45">2.1 添加如下yml文件</h3>
# `),s[9]||(s[9]=n(`<h3 id="_2-1-添加如下yml文件" tabindex="-1"><a class="header-anchor" href="#_2-1-添加如下yml文件"><span>2.1 添加如下yml文件</span></a></h3><p>前期的准备工作已经搞定了，现在就是添加一个github action的yml文件了。</p><p>在你的仓库里面创建一个 <code>.github/workflows</code>文件夹，并在里面创建一个 <code>.yml</code>文件，写入如下内容。</p><div class="language-yaml line-numbers-mode" data-ext="yaml" data-title="yaml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">docker images cicd</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 触发器设置</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">on</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  push</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    branches</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: [ </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;main&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ]</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  pull_request</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    branches</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: [ </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;main&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 项目任务，任务之间可以并行调度</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">jobs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  build</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 选择云端运行的环境</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    runs-on</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">ubuntu-latest</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    steps</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # uses代表使用一个模块，此处使用的是checkout模块，将github项目文件导入到当前环境中</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">uses</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">actions/checkout@v3</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 使用with跟在后面来为前面的模块输入参数</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      with</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        submodules</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;true&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">Set up QEMU</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      uses</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">docker/setup-qemu-action@v2</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">Set up Docker Buildx</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      uses</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">docker/setup-buildx-action@v2</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">Login to DockerHub</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      uses</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">docker/login-action@v2</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      with</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 这里用到了github的secrets功能，避免账户和密码随仓库泄露</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">       username</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">\${{ secrets.DOCKER_USERNAME }}</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">       password</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">\${{ secrets.DOCKER_TOKEN }}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 设置当前的发行版本tag</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">Release version</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">release_version</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      run</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#C678DD;--shiki-dark:#C678DD;">|</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">        app_version=$(cat version.py |sed -ne &quot;s/APP_VERSION\\s=\\s&#39;v\\(.*\\)&#39;/\\1/gp&quot;)</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">        echo &quot;app_version=$app_version&quot; &gt;&gt; $GITHUB_ENV</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 开始构建镜像</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">Build and push</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      uses</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">docker/build-push-action@v2</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      with</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        context</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">.</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        file</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">Dockerfile</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        build-args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#C678DD;--shiki-dark:#C678DD;">|</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">          GITHUB_TOKEN=\${{ secrets.RELEASE_TOKEN }}</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        platforms</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#C678DD;--shiki-dark:#C678DD;">|</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">          linux/amd64</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">          linux/arm64</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">          linux/arm</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        push</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">true</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # 指定用户/仓库名</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        tags</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#C678DD;--shiki-dark:#C678DD;">|</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">          \${{ secrets.DOCKER_USERNAME }}/blog_plus:latest</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">          \${{ secrets.DOCKER_USERNAME }}/blog_plus:\${{ env.app_version }}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 这里是通过md文件自动生成dockerhub描述的模块，也可以不需要</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">Docker Hub Description</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      uses</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">peter-evans/dockerhub-description@v3</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      with</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        username</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">\${{ secrets.DOCKER_USERNAME }}</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        password</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">\${{ secrets.DOCKER_PASSWORD }}</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        repository</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">\${{ secrets.DOCKER_USERNAME }}/blog_plus</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        readme-filepath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">./README.md</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对这里面的内容做一定说明，其中 <code>secrets.</code>使用的就是我们刚刚添加到github仓库中的变量，分别用于<a href="https://so.csdn.net/so/search?q=%E8%AE%BF%E9%97%AEgithub&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">访问github</a>仓库和登录dockerhub。</p><p>你会发现最末尾通过readme文件自动生成dockerhub的描述部分，多出来了一个上文没有提到的 <code>secrets.DOCKER_PASSWORD</code>，这个是你dockerhub账户的密码。如果你不需要自动生成dockerhub的描述，那就可以把最后一个 <code>Docker Hub Description</code>条目直接删除了，否则需要添加这个secrets。</p><p>项目中我使用了 <code>version.py</code>文件来存放最新的版本号，该文件需要在项目的根路径中创建，内容格式如下</p><div class="language-yaml" data-ext="yaml" data-title="yaml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">APP_VERSION = &#39;版本号&#39;</span></span></code></pre></div><p>使用这个workflows文件，你只需要修改 <code>\${{ secrets.DOCKER_USERNAME }}/blog_plus</code>里面右侧的镜像名字为你的项目名字，将 <code>file: dockerfile</code>这里的dockerfile设置为你项目中dockerfile的文件路径就可以了</p><p>另外，在这个yml中，指定了三个平台的<a href="https://so.csdn.net/so/search?q=docker%E9%95%9C%E5%83%8F&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">docker镜像</a>，这里可以根据你自己的实际需要来减少一些平台。毕竟大部分用户用的都是amd64（即x86）的电脑，如果没有用户需要使用arm平台，可以把后两项删除，以加快github action的运行速度。</p><div class="language-yaml" data-ext="yaml" data-title="yaml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        platforms</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#C678DD;--shiki-dark:#C678DD;">|</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">          linux/amd64</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">          linux/arm64</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">          linux/arm</span></span></code></pre></div><p>最终完成action的截图如下</p><figure><img src="`+B+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',13)),i(' <h3 id="8976971e">2.2 关于GITHUB_REPOSITORY_NAME_PART环境变量</h3> '),s[10]||(s[10]=a("h3",{id:"_2-2-关于github-repository-name-part环境变量",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_2-2-关于github-repository-name-part环境变量"},[a("span",null,"2.2 关于GITHUB_REPOSITORY_NAME_PART环境变量")])],-1)),s[11]||(s[11]=a("p",null,[l("在别的github action教学文章中，会提到使用 "),a("code",null,"${{ env.GITHUB_REPOSITORY_NAME_PART }}"),l("来直接用github的仓库名字作为镜像名。但经过我的测试，这个方法不适用于本文的这个workflows文件，使用该环境变量会导致容器的名字多出来一个尾随的 "),a("code",null,"/"),l("，最终的镜像名字变成了 "),a("code",null,"用户名/镜像名/:tag"),l("，不符dockerhub中镜像的命名规范。以下是具体的actions执行错误截图。")],-1)),s[12]||(s[12]=a("figure",null,[a("img",{src:u,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1)),i(` <h2 id="BQZ4j">3. 实例 前端项目打包</h2>
 `),s[13]||(s[13]=a("h2",{id:"_3-实例-前端项目打包",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_3-实例-前端项目打包"},[a("span",null,"3. 实例 前端项目打包")])],-1)),i(' <h3 id="ZruPs">3.1.本地 build 出 dist 目录</h3> '),s[14]||(s[14]=a("h2",{id:"_3-1-本地-build-出-dist-目录",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_3-1-本地-build-出-dist-目录"},[a("span",null,"3.1.本地 build 出 dist 目录")])],-1)),s[15]||(s[15]=a("p",null,"由于本人项目是vuepress的项目, 通过打包的 dist 文件在 根目录下的 src/.vuepress/dist 里",-1)),s[16]||(s[16]=a("p",null,"注意:如果 .gitignore 文件里面屏蔽了 src/.vuepress/dist/ 得禁用掉,得上传到github执行工作流,因为",-1)),s[17]||(s[17]=a("figure",null,[a("img",{src:b,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1)),i(' <h3 id="p5jyQ">3.2 根目录下创建 Dockerfile文件而不是dockerfile免得报错</h3> '),s[18]||(s[18]=n(`<h2 id="_3-2-根目录下创建-dockerfile文件而不是dockerfile免得报错" tabindex="-1"><a class="header-anchor" href="#_3-2-根目录下创建-dockerfile文件而不是dockerfile免得报错"><span>3.2 根目录下创建 Dockerfile文件而不是dockerfile免得报错</span></a></h2><div class="language-yaml line-numbers-mode" data-ext="yaml" data-title="yaml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 使用与你本地环境一致的 Node.js 版本</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">FROM node:21.7.1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 设置工作目录</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">WORKDIR /app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 复制项目文件到工作目录</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">COPY . .</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 使用 Nginx 作为服务器</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">FROM nginx:latest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 将构建好的静态文件复制到 Nginx 的默认目录</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 确保路径与你 VuePress 构建输出一致</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">COPY --from=0 /app/src/.vuepress/dist /usr/share/nginx/html</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 暴露 80 端口</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">EXPOSE 80</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 启动 Nginx 服务</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 使用镜像</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># docker pull weijordan/blog_plus</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#运行</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># docker run -d \\</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   --name blog_plus \\</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   -p 3002:80 \\</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   -v /myDocker/blog_plus:/app \\</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   weijordan/blog_plus</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查看</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># docker ps</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意:这里的环境 得改成与你本地环境一致,不然容易报错</p>`,3)),i(' <h3 id="t9IC9">3.3. 也可以用docker-compose.yml 来创建容器</h3> '),s[19]||(s[19]=n(`<h3 id="_3-3-也可以用docker-compose-yml-来创建容器" tabindex="-1"><a class="header-anchor" href="#_3-3-也可以用docker-compose-yml-来创建容器"><span>3.3. 也可以用docker-compose.yml 来创建容器</span></a></h3><div class="language-yaml line-numbers-mode" data-ext="yaml" data-title="yaml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># version: &#39;3&#39;  # docker-compose的版本</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">services</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  blog_plus</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 服务名称</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    image</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">weijordan/blog_plus</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 镜像名称</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    container_name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">blog_plus</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 容器名称</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    ports</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      - </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;3002:80&quot;</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 将容器的80端口映射到宿主机的8080端口</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    volumes</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      - </span><span style="color:#98C379;--shiki-dark:#98C379;">/myDocker/blog_plus:/app</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 将宿主机的/data/blog_plus目录映射到容器内的/app目录</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # environment:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    #   - EXAMPLE_VAR=example_value  # 如果需要，设置环境变量</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    restart</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">unless-stopped</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 容器退出时总是重启</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    networks</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      - </span><span style="color:#98C379;--shiki-dark:#98C379;">webnet</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 加入网络</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">networks</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  webnet</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 定义网络</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 使用外部网络，如果存在则使用，不存在则创建</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # external: true # 外部网络</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # name: nginx_proxy # 网络名称</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 如果不存在则创建网络</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # driver: bridge # 网络类型</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 运行容器</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # docker-compose up -d</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 检查运行情况</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # docker-compose ps</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 停止并移除容器</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # docker-compose down</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 停止容器</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # docker-compose stop</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 启动容器</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # docker-compose start</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 重启容器</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # docker-compose restart</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用的是 宝塔面板 的话,可以直接用模版创建 或者 cli</p>`,3)),i(' <h2 id="the-end">The end</h2> '),s[20]||(s[20]=n('<h2 id="the-end" tabindex="-1"><a class="header-anchor" href="#the-end"><span>The end</span></a></h2><p>不过，根据github actions上的warning，我这个workflows文件已经是老版本的了，里面使用的很多特性都即将不再支持，所以只是个临时用用的权宜之计，后续得去找个另外的yaml文件来处理这个docker镜像了。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><p>使用github action来自动发布项目到dockerhub。参考 <a href="https://msdemt.github.io/p/github-action-build-docker/" target="_blank" rel="noopener noreferrer">https://msdemt.github.io/p/github-action-build-docker/</a> 博客</p>',4))])}const F=e(v,[["render",m],["__file","autoDockerHub.html.vue"]]),C=JSON.parse('{"path":"/posts/%E8%BF%90%E7%BB%B4/docker/autoDockerHub.html","title":"开发环境通过github CICD 将Docker镜像自动发布项目到DockerHub","lang":"zh-CN","frontmatter":{"title":"开发环境通过github CICD 将Docker镜像自动发布项目到DockerHub","icon":"loop","date":"2024-10-25T00:00:00.000Z","category":["运维","Docker","云计算"],"tag":["运维","Docker"],"dir":{"order":5},"description":"1.准备工作 登录到Docker账户 官网：Docker Hub 首先，确保已经安装了Docker并且登录到Docker账户。如果没有账户，需要注册一个新的账户。 （也可以用github直接登录的） 1.1 dockerhub token https://hub.docker.com/settings/security 登录dockerhub，在用户的...","head":[["meta",{"property":"og:url","content":"https://weijordan.com/posts/%E8%BF%90%E7%BB%B4/docker/autoDockerHub.html"}],["meta",{"property":"og:site_name","content":"Mr.子冥"}],["meta",{"property":"og:title","content":"开发环境通过github CICD 将Docker镜像自动发布项目到DockerHub"}],["meta",{"property":"og:description","content":"1.准备工作 登录到Docker账户 官网：Docker Hub 首先，确保已经安装了Docker并且登录到Docker账户。如果没有账户，需要注册一个新的账户。 （也可以用github直接登录的） 1.1 dockerhub token https://hub.docker.com/settings/security 登录dockerhub，在用户的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-30T10:04:57.000Z"}],["meta",{"property":"article:author","content":"子冥"}],["meta",{"property":"article:tag","content":"运维"}],["meta",{"property":"article:tag","content":"Docker"}],["meta",{"property":"article:published_time","content":"2024-10-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-30T10:04:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"开发环境通过github CICD 将Docker镜像自动发布项目到DockerHub\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-30T10:04:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"子冥\\",\\"url\\":\\"https://weijordan.com\\"}]}"]]},"headers":[{"level":2,"title":"1.准备工作","slug":"_1-准备工作","link":"#_1-准备工作","children":[{"level":3,"title":"1.1 dockerhub token","slug":"_1-1-dockerhub-token","link":"#_1-1-dockerhub-token","children":[]},{"level":3,"title":"1.2 获取github操作token","slug":"_1-2-获取github操作token","link":"#_1-2-获取github操作token","children":[]}]},{"level":2,"title":"2.上传workflows文件","slug":"_2-上传workflows文件","link":"#_2-上传workflows文件","children":[{"level":3,"title":"2.1 添加如下yml文件","slug":"_2-1-添加如下yml文件","link":"#_2-1-添加如下yml文件","children":[]},{"level":3,"title":"2.2 关于GITHUB_REPOSITORY_NAME_PART环境变量","slug":"_2-2-关于github-repository-name-part环境变量","link":"#_2-2-关于github-repository-name-part环境变量","children":[]}]},{"level":2,"title":"3. 实例 前端项目打包","slug":"_3-实例-前端项目打包","link":"#_3-实例-前端项目打包","children":[]},{"level":2,"title":"3.1.本地 build 出 dist 目录","slug":"_3-1-本地-build-出-dist-目录","link":"#_3-1-本地-build-出-dist-目录","children":[]},{"level":2,"title":"3.2 根目录下创建 Dockerfile文件而不是dockerfile免得报错","slug":"_3-2-根目录下创建-dockerfile文件而不是dockerfile免得报错","link":"#_3-2-根目录下创建-dockerfile文件而不是dockerfile免得报错","children":[{"level":3,"title":"3.3. 也可以用docker-compose.yml 来创建容器","slug":"_3-3-也可以用docker-compose-yml-来创建容器","link":"#_3-3-也可以用docker-compose-yml-来创建容器","children":[]}]},{"level":2,"title":"The end","slug":"the-end","link":"#the-end","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1730282697000,"updatedTime":1730282697000,"contributors":[{"name":"weijordan","email":"12012972+weijordan@user.noreply.gitee.com","commits":1}]},"readingTime":{"minutes":6.6,"words":1979},"filePathRelative":"posts/运维/docker/autoDockerHub.md","localizedDate":"2024年10月25日","excerpt":"<!-- <h2 id=\\"1.%E7%99%BB%E5%BD%95%E5%88%B0Docker%E8%B4%A6%E6%88%B7\\">1.准备工作</h2> -->\\n<h2>1.准备工作</h2>\\n<p>登录到Docker账户</p>\\n<p>官网：<a href=\\"https://hub.docker.com/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Docker Hub</a></p>\\n<p>首先，确保已经安装了Docker并且登录到Docker账户。如果没有账户，需要注册一个新的账户。</p>\\n<figure><figcaption></figcaption></figure>","autoDesc":true}');export{F as comp,C as data};
